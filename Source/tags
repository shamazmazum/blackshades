!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
ABS	Quaternions.cpp	369;"	d	file:
ABS	Quaternions.cpp	385;"	d	file:
ABS	Quaternions.cpp	472;"	d	file:
ABS	Quaternions.cpp	488;"	d	file:
AddJoint	Skeleton.cpp	/^void Skeleton::AddJoint(float x, float y, float z, int which)$/;"	f	class:Skeleton
AddMuscle	Skeleton.cpp	/^void Skeleton::AddMuscle(int attach1, int attach2, float minlength,$/;"	f	class:Skeleton
Animation	Skeleton.h	/^class Animation {$/;"	c
Apply	Camera.cpp	/^void Camera::Apply()$/;"	f	class:Camera
Bigstreet	Game.h	/^  Model Bigstreet;$/;"	m	class:Game
Bigstreet	Viewer.h	/^  Model Bigstreet;$/;"	m	class:Viewer
Boolean	Support.h	/^typedef bool Boolean;$/;"	t
BuildFont	Font.cpp	/^void Font::BuildFont()          \/\/ Build Our Font Display List$/;"	f	class:Font
BuildFont	Text.cpp	/^void Text::BuildFont()          \/\/ Build Our Font Display List$/;"	f	class:Text
BulletCollideWithPlayer	Person.cpp	/^HitStruct Person::BulletCollideWithPlayer(int who, XYZ start, XYZ end)$/;"	f	class:Person
Button	Button.cpp	/^Button::Button()$/;"	f	class:Button
Button	Button.cpp	/^Button::Button(float xpos, float ypos, float xwidth, float yheight)$/;"	f	class:Button
Button	Button.h	/^class Button : public Window {$/;"	c
ButtonClick	Support.cpp	/^int ButtonClick(int button)$/;"	f
CalculateNormals	Models.cpp	/^void Model::CalculateNormals()$/;"	f	class:Model
Camera	Camera.h	/^class Camera {$/;"	c
CleanupAGL	AGL_DSp.cpp	/^void CleanupAGL(AGLContext context)$/;"	f
Color	Colors.h	/^  Color() {$/;"	f	class:Color
Color	Colors.h	/^  Color(GLfloat _r, GLfloat _g, GLfloat _b, GLfloat _a = 1) {$/;"	f	class:Color
Color	Colors.h	/^class Color {$/;"	c
Config	Config.cpp	/^Config::Config()$/;"	f	class:Config
Config	Config.h	/^class Config {$/;"	c
ConfigExist	Config.cpp	/^bool Config::ConfigExist(const char *configFile)$/;"	f	class:Config
Costume	Person.h	/^class Costume {$/;"	c
CreateWindow	AGL_DSp.cpp	/^void CreateWindow(CGrafPtr & theFrontBuffer, int width, int height)$/;"	f
CrossProduct	Quaternions.cpp	/^void CrossProduct(XYZ P, XYZ Q, XYZ * V)$/;"	f
Cstr	Files.h	38;"	d
CubeInFrustum	Frustum.cpp	/^int FRUSTUM::CubeInFrustum(float x, float y, float z, float size)$/;"	f	class:FRUSTUM
CubeInFrustum	Frustum.cpp	/^int FRUSTUM::CubeInFrustum(float x, float y, float z, float size, float height)$/;"	f	class:FRUSTUM
DEGREES	Quaternions.h	31;"	d
Decals	Decals.h	/^class Decals {$/;"	c
DegreesToRadians	PhysicsMath.h	/^inline float DegreesToRadians(float deg)$/;"	f
DeleteDecal	Decals.cpp	/^int Decals::DeleteDecal(int which)$/;"	f	class:Decals
DeleteJoint	Skeleton.cpp	/^void Skeleton::DeleteJoint(int whichjoint)$/;"	f	class:Skeleton
DeleteMuscle	Skeleton.cpp	/^void Skeleton::DeleteMuscle(int whichmuscle)$/;"	f	class:Skeleton
DeleteSprite	Sprites.cpp	/^int Sprites::DeleteSprite(int which)$/;"	f	class:Sprites
Dispose	GameInitDispose.cpp	/^void Game::Dispose()$/;"	f	class:Game
DisposeMouse	Support.cpp	/^void DisposeMouse()$/;"	f
DoAnimations	Person.cpp	/^void Person::DoAnimations(int who)$/;"	f	class:Person
DoAnimationslite	Person.cpp	/^void Person::DoAnimationslite(int who)$/;"	f	class:Person
DoConstraint	Skeleton.cpp	/^void Joint::DoConstraint()$/;"	f	class:Joint
DoConstraint	Skeleton.cpp	/^void Muscle::DoConstraint(int broken)$/;"	f	class:Muscle
DoConstraints	Skeleton.cpp	/^void Skeleton::DoConstraints()$/;"	f	class:Skeleton
DoConstraints	Skeleton.cpp	/^void Skeleton::DoConstraints(Model * collide, XYZ * move, float rotation)$/;"	f	class:Skeleton
DoGravity	Skeleton.cpp	/^void Skeleton::DoGravity()$/;"	f	class:Skeleton
DoRotation	Quaternions.cpp	/^XYZ DoRotation(XYZ thePoint, float xang, float yang, float zang)$/;"	f
DoRotationRadian	Quaternions.cpp	/^XYZ DoRotationRadian(XYZ thePoint, float xang, float yang, float zang)$/;"	f
DoSDLKey	SDL_funcs.cpp	/^void DoSDLKey(SDL_Event * event)$/;"	f
DoStuff	Decals.cpp	/^void Decals::DoStuff()$/;"	f	class:Decals
DoStuff	Person.cpp	/^void Person::DoStuff(int who)$/;"	f	class:Person
DoStuff	Sprites.cpp	/^void Sprites::DoStuff()$/;"	f	class:Sprites
Draw	Skeleton.cpp	/^void Skeleton::Draw(int muscleview)$/;"	f	class:Skeleton
DrawFlash	GameDraw.cpp	/^void Game::DrawFlash()$/;"	f	class:Game
DrawGLScene	GameDraw.cpp	/^int Game::DrawGLScene(void)$/;"	f	class:Game
DrawGLScene	Viewer.cpp	/^void Viewer::DrawGLScene()$/;"	f	class:Viewer
DrawGame	GameDraw.cpp	/^void Game::DrawGame(void)$/;"	f	class:Game
DrawHelp	GameDraw.cpp	/^void DrawHelp()$/;"	f
DrawMainMenu	GameDraw.cpp	/^void Game::DrawMainMenu()$/;"	f	class:Game
DrawMouse	GameDraw.cpp	/^void Game::DrawMouse(void)$/;"	f	class:Game
DrawSkeleton	Person.cpp	/^int Person::DrawSkeleton(int who)$/;"	f	class:Person
DrawViewer	Viewer.h	/^  void DrawViewer() {};$/;"	f	class:Viewer
ERROR_LENGTH	Files.h	68;"	d
EndLoad	Files.cpp	/^void Files::EndLoad()$/;"	f	class:Files
EndLoad	Support.cpp	/^void Files::EndLoad()$/;"	f	class:Files
EndSave	Files.cpp	/^void Files::EndSave()$/;"	f	class:Files
Environment	Globals.h	/^class Environment {$/;"	c
EventLoop	GameLoop.cpp	/^void Game::EventLoop(void)$/;"	f	class:Game
EventLoop	Viewer.cpp	/^void Viewer::EventLoop()$/;"	f	class:Viewer
FALSE	Support.h	39;"	d
FILE_ERROR_ALERT	Files.h	40;"	d
FILE_ERROR_PREFIX	Files.h	50;"	d
FILE_ERROR_STRINGS	Files.h	49;"	d
FILE_ERROR_SUFFIX	Files.h	51;"	d
FILE_NAME_SIZE	Files.h	67;"	d
FILE_STRINGS	Files.h	36;"	d
FILE_STRINGS	Files.h	55;"	d
FORM_NAME_STRING	Files.h	63;"	d
FRUSTUM	Frustum.h	/^class FRUSTUM {$/;"	c
FRUSTUM_H	Frustum.h	21;"	d
FSClose	Support.h	52;"	d
FatalErrorAlert	Alerts.cpp	/^void FatalErrorAlert(UInt16 errorNum, OSErr osError)$/;"	f
Files	Files.h	/^    Files():sFile(-1) {$/;"	f	class:Files
Files	Files.h	/^class Files {$/;"	c
FindRotationGun	Weapon.cpp	/^void Weapon::FindRotationGun(XYZ start, XYZ target)$/;"	f	class:Weapon
FindRotationJoint	Skeleton.cpp	/^void Skeleton::FindRotationJoint(int which)$/;"	f	class:Skeleton
FindRotationMuscle	Skeleton.cpp	/^void Skeleton::FindRotationMuscle(int which)$/;"	f	class:Skeleton
Fire	GameTick.cpp	/^void Game::Fire()$/;"	f	class:Game
Fog	Fog.h	/^class Fog {$/;"	c
Font	Font.h	/^class Font {$/;"	c
FontTexture	Font.h	/^  GLuint FontTexture;$/;"	m	class:Font
FontTexture	Text.h	/^  GLuint FontTexture;$/;"	m	class:Text
FreeOGG	Support.cpp	/^void FreeOGG(ALenum format, void *wave, unsigned int size, ALsizei freq)$/;"	f
GAME	Globals.h	/^  GAME,$/;"	e	enum:game_state
Game	Game.h	/^class Game {$/;"	c
GameTick	GameTick.cpp	/^void Game::GameTick()$/;"	f	class:Game
GetFrustum	Frustum.cpp	/^void FRUSTUM::GetFrustum()$/;"	f	class:FRUSTUM
GetKeys	SDL_funcs.cpp	/^void GetKeys(unsigned long *keys)$/;"	f
GetMouse	Support.cpp	/^void GetMouse(Point * p)$/;"	f
GetMouseRel	Support.cpp	/^void GetMouseRel(Point * p)$/;"	f
GetScalar	PhysicsMath.h	/^inline float Quaternion::GetScalar(void)$/;"	f	class:Quaternion
GetVector	PhysicsMath.h	/^inline Vector Quaternion::GetVector(void)$/;"	f	class:Quaternion
HELP	Globals.h	/^  HELP$/;"	e	enum:game_state
HandleKeyDown	GameLoop.cpp	/^void Game::HandleKeyDown(char theChar)$/;"	f	class:Game
HasAppearance	AGL_DSp.cpp	/^Boolean HasAppearance(void)$/;"	f
HitStruct	Person.h	/^class HitStruct {$/;"	c
INIT	Globals.h	/^  INIT = 0,$/;"	e	enum:game_state
Image	Image.cpp	/^Image::Image()$/;"	f	class:Image
Image	Image.h	/^class Image:public Window {$/;"	c
InitGL	SDL_funcs.cpp	/^int InitGL(void)$/;"	f
InitGUI	GameInitDispose.cpp	/^void Game::InitGUI()$/;"	f	class:Game
InitGame	GameInitDispose.cpp	/^void Game::InitGame()$/;"	f	class:Game
InitMouse	Support.cpp	/^void InitMouse()$/;"	f
Inverse	PhysicsMath.h	/^inline Matrix3x3 Matrix3x3::Inverse(void)$/;"	f	class:Matrix3x3
IsKeyDown	MacInput.cpp	/^Boolean IsKeyDown(unsigned char *keyMap, unsigned short theKey)$/;"	f
JOURNAL_NAME_STRING	Files.h	60;"	d
Joint	Skeleton.h	/^class Joint {$/;"	c
Label	Label.cpp	/^Label::Label()$/;"	f	class:Label
Label	Label.h	/^class Label:public Window {$/;"	c
LineCheck	Models.cpp	/^int Model::LineCheck(XYZ p1, XYZ p2, XYZ * p)$/;"	f	class:Model
LineCheck2	Models.cpp	/^int Model::LineCheck2(XYZ * p1, XYZ * p2, XYZ * p, XYZ * move, float *rotate)$/;"	f	class:Model
LineCheck2	Models.cpp	/^int Model::LineCheck2(XYZ p1, XYZ p2, XYZ * p, XYZ move, float rotate)$/;"	f	class:Model
LineCheck3	Models.cpp	/^int Model::LineCheck3(XYZ p1, XYZ p2, XYZ * p, XYZ move, float rotate, float *d)$/;"	f	class:Model
LineFacet	Quaternions.cpp	/^bool LineFacet(Vector p1, Vector p2, Vector pa, Vector pb, Vector pc,$/;"	f
LineFacet	Quaternions.cpp	/^bool LineFacet(XYZ p1, XYZ p2, XYZ pa, XYZ pb, XYZ pc, XYZ * p)$/;"	f
LineFacetd	Quaternions.cpp	/^bool LineFacetd(XYZ * p1, XYZ * p2, XYZ * pa, XYZ * pb, XYZ * pc, XYZ * n,$/;"	f
LineFacetd	Quaternions.cpp	/^bool LineFacetd(XYZ p1, XYZ p2, XYZ pa, XYZ pb, XYZ pc, XYZ * p)$/;"	f
LineFacetd	Quaternions.cpp	/^bool LineFacetd(XYZ p1, XYZ p2, XYZ pa, XYZ pb, XYZ pc, XYZ n, XYZ * p)$/;"	f
Load	Skeleton.cpp	/^void Animation::Load(char *fileName)$/;"	f	class:Animation
Load	Skeleton.cpp	/^void Animation::Load(char *fileName, float rotate)$/;"	f	class:Animation
Load	Skeleton.cpp	/^void Skeleton::Load(char *fileName)$/;"	f	class:Skeleton
LoadBloodTexture	Decals.cpp	/^void Decals::LoadBloodTexture(char *fileName, int which)$/;"	f	class:Decals
LoadBloodTexture	Sprites.cpp	/^void Sprites::LoadBloodTexture(char *fileName)$/;"	f	class:Sprites
LoadBulletHoleTexture	Decals.cpp	/^void Decals::LoadBulletHoleTexture(char *fileName)$/;"	f	class:Decals
LoadBulletTexture	Sprites.cpp	/^void Sprites::LoadBulletTexture(char *fileName)$/;"	f	class:Sprites
LoadCraterTexture	Decals.cpp	/^void Decals::LoadCraterTexture(char *fileName)$/;"	f	class:Decals
LoadFlareTexture	Sprites.cpp	/^void Sprites::LoadFlareTexture(char *fileName)$/;"	f	class:Sprites
LoadFontTexture	Font.cpp	/^void Font::LoadFontTexture(char *fileName)$/;"	f	class:Font
LoadFontTexture	Text.cpp	/^void Text::LoadFontTexture(char *fileName)$/;"	f	class:Text
LoadMuzzleFlareTexture	Sprites.cpp	/^void Sprites::LoadMuzzleFlareTexture(char *fileName)$/;"	f	class:Sprites
LoadOGG_CFH	Support.cpp	/^void LoadOGG_CFH(char *filename, ALenum * format, void **wave,$/;"	f
LoadPersonSpriteTexture	GameInitDispose.cpp	/^void LoadPersonSpriteTexture(char *fileName, GLuint * textureid)$/;"	f
LoadRainTexture	Sprites.cpp	/^void Sprites::LoadRainTexture(char *fileName)$/;"	f	class:Sprites
LoadSmokeTexture	Sprites.cpp	/^void Sprites::LoadSmokeTexture(char *fileName)$/;"	f	class:Sprites
LoadSnowTexture	Sprites.cpp	/^void Sprites::LoadSnowTexture(char *fileName)$/;"	f	class:Sprites
LoadSounds	GameInitDispose.cpp	/^void LoadSounds(bool musictoggle)$/;"	f
LoadTGA	TGALoader.cpp	/^TGAImageRec *LoadTGA(char *filename)$/;"	f
LoadingScreen	GameDraw.cpp	/^void Game::LoadingScreen(float percent)$/;"	f	class:Game
MAC_0_KEY	MacInput.h	38;"	d
MAC_1_KEY	MacInput.h	29;"	d
MAC_2_KEY	MacInput.h	30;"	d
MAC_3_KEY	MacInput.h	31;"	d
MAC_4_KEY	MacInput.h	32;"	d
MAC_5_KEY	MacInput.h	33;"	d
MAC_6_KEY	MacInput.h	34;"	d
MAC_7_KEY	MacInput.h	35;"	d
MAC_8_KEY	MacInput.h	36;"	d
MAC_9_KEY	MacInput.h	37;"	d
MAC_ARROW_DOWN_KEY	MacInput.h	107;"	d
MAC_ARROW_LEFT_KEY	MacInput.h	108;"	d
MAC_ARROW_RIGHT_KEY	MacInput.h	109;"	d
MAC_ARROW_UP_KEY	MacInput.h	106;"	d
MAC_A_KEY	MacInput.h	49;"	d
MAC_B_KEY	MacInput.h	50;"	d
MAC_CAPS_LOCK_KEY	MacInput.h	95;"	d
MAC_COMMAND_KEY	MacInput.h	93;"	d
MAC_CONTROL_KEY	MacInput.h	97;"	d
MAC_C_KEY	MacInput.h	51;"	d
MAC_DELETE_KEY	MacInput.h	91;"	d
MAC_DEL_KEY	MacInput.h	101;"	d
MAC_D_KEY	MacInput.h	52;"	d
MAC_END_KEY	MacInput.h	103;"	d
MAC_ENTER_KEY	MacInput.h	88;"	d
MAC_ESCAPE_KEY	MacInput.h	92;"	d
MAC_E_KEY	MacInput.h	53;"	d
MAC_F10_KEY	MacInput.h	84;"	d
MAC_F11_KEY	MacInput.h	85;"	d
MAC_F12_KEY	MacInput.h	86;"	d
MAC_F1_KEY	MacInput.h	75;"	d
MAC_F2_KEY	MacInput.h	76;"	d
MAC_F3_KEY	MacInput.h	77;"	d
MAC_F4_KEY	MacInput.h	78;"	d
MAC_F5_KEY	MacInput.h	79;"	d
MAC_F6_KEY	MacInput.h	80;"	d
MAC_F7_KEY	MacInput.h	81;"	d
MAC_F8_KEY	MacInput.h	82;"	d
MAC_F9_KEY	MacInput.h	83;"	d
MAC_F_KEY	MacInput.h	54;"	d
MAC_G_KEY	MacInput.h	55;"	d
MAC_HOME_KEY	MacInput.h	102;"	d
MAC_H_KEY	MacInput.h	56;"	d
MAC_INSERT_KEY	MacInput.h	100;"	d
MAC_I_KEY	MacInput.h	57;"	d
MAC_J_KEY	MacInput.h	58;"	d
MAC_K_KEY	MacInput.h	59;"	d
MAC_LEFT_BRACKET_KEY	MacInput.h	104;"	d
MAC_L_KEY	MacInput.h	60;"	d
MAC_M_KEY	MacInput.h	61;"	d
MAC_NUMPAD_0_KEY	MacInput.h	48;"	d
MAC_NUMPAD_1_KEY	MacInput.h	39;"	d
MAC_NUMPAD_2_KEY	MacInput.h	40;"	d
MAC_NUMPAD_3_KEY	MacInput.h	41;"	d
MAC_NUMPAD_4_KEY	MacInput.h	42;"	d
MAC_NUMPAD_5_KEY	MacInput.h	43;"	d
MAC_NUMPAD_6_KEY	MacInput.h	44;"	d
MAC_NUMPAD_7_KEY	MacInput.h	45;"	d
MAC_NUMPAD_8_KEY	MacInput.h	46;"	d
MAC_NUMPAD_9_KEY	MacInput.h	47;"	d
MAC_N_KEY	MacInput.h	62;"	d
MAC_OPTION_KEY	MacInput.h	96;"	d
MAC_O_KEY	MacInput.h	63;"	d
MAC_PAGE_DOWN_KEY	MacInput.h	99;"	d
MAC_PAGE_UP_KEY	MacInput.h	98;"	d
MAC_P_KEY	MacInput.h	64;"	d
MAC_Q_KEY	MacInput.h	65;"	d
MAC_RETURN_KEY	MacInput.h	87;"	d
MAC_RIGHT_BRACKET_KEY	MacInput.h	105;"	d
MAC_R_KEY	MacInput.h	66;"	d
MAC_SHIFT_KEY	MacInput.h	94;"	d
MAC_SPACE_KEY	MacInput.h	90;"	d
MAC_S_KEY	MacInput.h	67;"	d
MAC_TAB_KEY	MacInput.h	89;"	d
MAC_T_KEY	MacInput.h	68;"	d
MAC_U_KEY	MacInput.h	69;"	d
MAC_V_KEY	MacInput.h	70;"	d
MAC_W_KEY	MacInput.h	71;"	d
MAC_X_KEY	MacInput.h	72;"	d
MAC_Y_KEY	MacInput.h	73;"	d
MAC_Z_KEY	MacInput.h	74;"	d
MAINMENU	Globals.h	/^  MAINMENU,$/;"	e	enum:game_state
MAX	Quaternions.cpp	370;"	d	file:
MAX	Quaternions.cpp	372;"	d	file:
MAX	Quaternions.cpp	473;"	d	file:
MAX	Quaternions.cpp	475;"	d	file:
MAX_PATH	Support.cpp	106;"	d	file:
Magnitude	PhysicsMath.h	/^inline float Quaternion::Magnitude(void)$/;"	f	class:Quaternion
Magnitude	PhysicsMath.h	/^inline float Vector::Magnitude(void)$/;"	f	class:Vector
MainMenuTick	GameTick.cpp	/^void Game::MainMenuTick()$/;"	f	class:Game
MakeDecal	Decals.cpp	/^int Decals::MakeDecal(int atype, XYZ location, float size, XYZ normal, int poly,$/;"	f	class:Decals
MakeEulerAnglesFromQ	PhysicsMath.h	/^inline Vector MakeEulerAnglesFromQ(Quaternion q)$/;"	f
MakeQFromEulerAngles	PhysicsMath.h	/^inline Quaternion MakeQFromEulerAngles(float x, float y, float z)$/;"	f
MakeSprite	Sprites.cpp	/^int Sprites::MakeSprite(int atype, float abrightness, float acolor1,$/;"	f	class:Sprites
Matrix3x3	PhysicsMath.h	/^class Matrix3x3 {$/;"	c
Matrix3x3	PhysicsMath.h	/^inline Matrix3x3::Matrix3x3(float r1c1, float r1c2, float r1c3,$/;"	f	class:Matrix3x3
Matrix3x3	PhysicsMath.h	/^inline Matrix3x3::Matrix3x3(void)$/;"	f	class:Matrix3x3
Matrix_t	Quaternions.h	/^typedef float Matrix_t[4][4];$/;"	t
MessageAlert	Alerts.cpp	/^void MessageAlert(unsigned char *theMessage)$/;"	f
Microseconds	Support.cpp	/^void Microseconds(UnsignedWide * microTickCount)$/;"	f
Mission	Globals.h	/^class Mission$/;"	c
Model	Models.h	/^class Model {$/;"	c
MouseRotate	Camera.cpp	/^void Camera::MouseRotate(float mousesensitivity)$/;"	f	class:Camera
MoveMouse	Support.cpp	/^void MoveMouse(int xcoord, int ycoord, Point * mouseloc)$/;"	f
MultColor	Models.cpp	/^void Model::MultColor(float howmuch)$/;"	f	class:Model
Muscle	Skeleton.h	/^class Muscle {$/;"	c
MusclesSet	Skeleton.cpp	/^void Skeleton::MusclesSet()$/;"	f	class:Skeleton
Mutex	Threads.h	/^  Mutex() {$/;"	f	class:Mutex
Mutex	Threads.h	/^class Mutex {$/;"	c
MutexLocker	Threads.h	/^  MutexLocker(Mutex & pm):m(pm) {$/;"	f	class:MutexLocker
MutexLocker	Threads.h	/^class MutexLocker {$/;"	c
NUM_TEXTURES	Image.h	32;"	d
Normalise	Quaternions.cpp	/^void Normalise(XYZ * vectory)$/;"	f
Normalize	PhysicsMath.h	/^inline void Vector::Normalize(void)$/;"	f	class:Vector
OLD_SAVE_VERSION	Files.h	41;"	d
OSErr	Support.h	/^typedef int OSErr;$/;"	t
O_BINARY	Support.cpp	102;"	d	file:
OpenFile	Files.cpp	/^short Files::OpenFile(Str255 Name)$/;"	f	class:Files
OpenFile	Support.cpp	/^int Files::OpenFile(Str255 Name)$/;"	f	class:Files
OpenFileDialog	Files.cpp	/^short Files::OpenFileDialog()$/;"	f	class:Files
OpenNewFile	Files.cpp	/^short Files::OpenNewFile(SFReply * psfReply,$/;"	f	class:Files
OpenSavedGame	Files.cpp	/^short Files::OpenSavedGame(Str255 Name)$/;"	f	class:Files
PB_CANCEL	Files.h	46;"	d
PB_DONT_SAVE	Files.h	47;"	d
PB_SAVE	Files.h	45;"	d
PI	Quaternions.h	29;"	d
Person	Person.h	/^class Person {$/;"	c
Player	Person.h	/^class Player : public Person {$/;"	c
Point	Support.h	/^typedef struct Point {$/;"	s
Point	Support.h	/^} Point;$/;"	t	typeref:struct:Point
PointInTriangle	Quaternions.cpp	/^bool PointInTriangle(Vector * p, Vector normal, float p11, float p12, float p13,$/;"	f
PointInTriangle	Quaternions.cpp	/^bool PointInTriangle(XYZ * p, XYZ normal, XYZ * p1, XYZ * p2, XYZ * p3)$/;"	f
ProcessSDLEvents	SDL_funcs.cpp	/^void ProcessSDLEvents()$/;"	f
PromptForSaveAS	Files.cpp	/^short Files::PromptForSaveAS(short sPromptID,$/;"	f	class:Files
Pstr	Files.h	37;"	d
QGetAngle	PhysicsMath.h	/^inline float QGetAngle(Quaternion q)$/;"	f
QGetAxis	PhysicsMath.h	/^inline Vector QGetAxis(Quaternion q)$/;"	f
QNormalize	Quaternions.cpp	/^quaternion QNormalize(quaternion Quat)$/;"	f
QRotate	PhysicsMath.h	/^inline Quaternion QRotate(Quaternion q1, Quaternion q2)$/;"	f
QVRotate	PhysicsMath.h	/^inline Vector QVRotate(Quaternion q, Vector v)$/;"	f
Quat2Vector	Quaternions.cpp	/^XYZ Quat2Vector(quaternion Quat)$/;"	f
Quat_2_AA	Quaternions.cpp	/^angle_axis Quat_2_AA(quaternion Quat)$/;"	f
Quat_2_Matrix	Quaternions.cpp	/^void Quat_2_Matrix(quaternion Quat, Matrix_t m)$/;"	f
Quat_Mult	Quaternions.cpp	/^quaternion Quat_Mult(quaternion q1, quaternion q2)$/;"	f
Quaternion	PhysicsMath.h	/^class Quaternion {$/;"	c
Quaternion	PhysicsMath.h	/^inline Quaternion::Quaternion(float e0, float e1, float e2, float e3)$/;"	f	class:Quaternion
Quaternion	PhysicsMath.h	/^inline Quaternion::Quaternion(void)$/;"	f	class:Quaternion
RAD2DEG	Globals.h	26;"	d
RAD2DEG	Weapon.h	26;"	d
RADIANS	Quaternions.h	30;"	d
REGISTRATION_FORM	Files.h	65;"	d
RadiansToDegrees	PhysicsMath.h	/^inline float RadiansToDegrees(float rad)$/;"	f
Random	Support.cpp	/^int Random()$/;"	f
ReSizeGLScene	SDL_funcs.cpp	/^GLvoid ReSizeGLScene(float fov, float near, float far)$/;"	f
ReadBool	Serialize.cpp	/^int ReadBool(int fd, int count, bool * b)$/;"	f
ReadConfig	Config.cpp	/^bool Config::ReadConfig(const char *configFile)$/;"	f	class:Config
ReadFloat	Serialize.cpp	/^int ReadFloat(int fd, int count, float *f)$/;"	f
ReadHighScore	Config.cpp	/^bool Config::ReadHighScore()$/;"	f	class:Config
ReadInt	Serialize.cpp	/^int ReadInt(int fd, int count, int *s, bool rf)$/;"	f
ReadShort	Serialize.cpp	/^int ReadShort(int fd, int count, short *s)$/;"	f
ReadTexturedTriangle	Serialize.cpp	/^int ReadTexturedTriangle(int fd, int count, TexturedTriangle * tt)$/;"	f
ReadXYZ	Serialize.cpp	/^int ReadXYZ(int fd, int count, XYZ * xyz)$/;"	f
ReflectVector	Quaternions.cpp	/^void ReflectVector(XYZ * vel, XYZ * n)$/;"	f
ResetFog	Fog.cpp	/^void Fog::ResetFog()$/;"	f	class:Fog
Reverse	PhysicsMath.h	/^inline void Vector::Reverse(void)$/;"	f	class:Vector
Rotate	Models.cpp	/^void Model::Rotate(float xang, float yang, float zang)$/;"	f	class:Model
SAVE_FORM_STRING	Files.h	62;"	d
SAVE_GAME_STRING	Files.h	56;"	d
SAVE_JOURNAL_STRING	Files.h	59;"	d
SAVE_SCORES_STRING	Files.h	57;"	d
SAVE_WARNING_ID	Files.h	44;"	d
SAVE_WARNING_STRINGS	Files.h	53;"	d
SCORES_NAME_STRING	Files.h	58;"	d
SCREEN_HEIGHT	AGL_DSp.h	41;"	d
SCREEN_WIDTH	AGL_DSp.h	40;"	d
SERIALIZE_H	Serialize.h	21;"	d
SInt16	Support.h	/^typedef short int SInt16;$/;"	t
STUB_FUNCTION	Support.h	29;"	d
SUPPORT_H	Support.h	21;"	d
SaveScreenshot	GameDraw.cpp	/^void Game::SaveScreenshot(const char *path)$/;"	f	class:Game
Scale	Models.cpp	/^void Model::Scale(float xscale, float yscale, float zscale)$/;"	f	class:Model
ScaleNormals	Models.cpp	/^void Model::ScaleNormals(float xscale, float yscale, float zscale)$/;"	f	class:Model
SelectResolution	Alerts.cpp	/^int SelectResolution(void)$/;"	f
SetFPos	Support.h	51;"	d
SetFog	Fog.cpp	/^void Fog::SetFog(Color newColor, float fStart, float fEnd, float Density)$/;"	f	class:Fog
SetFog	Fog.cpp	/^void Fog::SetFog(float colorR, float colorG, float colorB, float fStart,$/;"	f	class:Fog
SetJoint	Skeleton.cpp	/^void Skeleton::SetJoint(float x, float y, float z, int which, int whichjoint)$/;"	f	class:Skeleton
SetupAGL	AGL_DSp.cpp	/^AGLContext SetupAGL(AGLDrawable window)$/;"	f
SetupScreen	AGL_DSp.cpp	/^CGrafPtr SetupScreen(int width, int height)$/;"	f
ShutdownScreen	AGL_DSp.cpp	/^void ShutdownScreen(CGrafPtr theFrontBuffer)$/;"	f
Skeleton	Skeleton.h	/^class Skeleton {$/;"	c
Smooth	Camera.cpp	/^void Camera::Smooth()$/;"	f	class:Camera
SphereInFrustum	Frustum.cpp	/^int FRUSTUM::SphereInFrustum(float x, float y, float z, float radius)$/;"	f	class:FRUSTUM
Splat	GameTick.cpp	/^void Game::Splat(int k)$/;"	f	class:Game
Sprites	Sprites.h	/^class Sprites {$/;"	c
StartLoad	Files.cpp	/^void Files::StartLoad()$/;"	f	class:Files
StartSave	Files.cpp	/^void Files::StartSave()$/;"	f	class:Files
Str255	Support.h	/^typedef unsigned char *Str255;$/;"	t
TGAImageRec	TGALoader.h	/^typedef struct TGAImageRec {$/;"	s
TGAImageRec	TGALoader.h	/^} TGAImageRec;$/;"	t	typeref:struct:TGAImageRec
TRUE	Support.h	38;"	d
TempFog	Fog.cpp	/^void Fog::TempFog(float colorR, float colorG, float colorB)$/;"	f	class:Fog
Text	Text.h	/^class Text {$/;"	c
TexturedTriangle	Models.h	/^class TexturedTriangle {$/;"	c
Tick	GameTick.cpp	/^void Game::Tick()$/;"	f	class:Game
Tick	Viewer.cpp	/^void Viewer::Tick()$/;"	f	class:Viewer
To_Quat	Quaternions.cpp	/^quaternion To_Quat(Matrix_t m)$/;"	f
To_Quat	Quaternions.cpp	/^quaternion To_Quat(angle_axis Ang_Ax)$/;"	f
To_Quat	Quaternions.cpp	/^quaternion To_Quat(int In_Degrees, euler Euler)$/;"	f
ToolboxInit	AGL_DSp.cpp	/^void ToolboxInit(void)$/;"	f
Translate	Models.cpp	/^void Model::Translate(float xtrans, float ytrans, float ztrans)$/;"	f	class:Model
Transpose	PhysicsMath.h	/^inline Matrix3x3 Matrix3x3::Transpose(void)$/;"	f	class:Matrix3x3
TriangleNum	Models.h	/^  short vertexNum, TriangleNum;$/;"	m	class:Model
Triangles	Models.h	/^  TexturedTriangle Triangles[max_textured_triangle];$/;"	m	class:Model
TripleScalarProduct	PhysicsMath.h	/^inline float TripleScalarProduct(Vector u, Vector v, Vector w)$/;"	f
UNREADABLE_SCORES_ALERT	Files.h	42;"	d
UNTITLED_STRING	Files.h	61;"	d
UnsignedWide	Support.h	/^typedef struct UnsignedWide {$/;"	s
UnsignedWide	Support.h	/^} UnsignedWide;$/;"	t	typeref:struct:UnsignedWide
Update	Camera.cpp	/^void Camera::Update()$/;"	f	class:Camera
UpdateVertexArray	Models.cpp	/^void Model::UpdateVertexArray()$/;"	f	class:Model
Vector	PhysicsMath.h	/^class Vector {$/;"	c
Vector	PhysicsMath.h	/^inline Vector::Vector(float xi, float yi, float zi)$/;"	f	class:Vector
Vector	PhysicsMath.h	/^inline Vector::Vector(void)$/;"	f	class:Vector
Viewer	Viewer.h	/^class Viewer {$/;"	c
Weapon	Weapon.h	/^class Weapon {$/;"	c
Window	Window.h	/^  Window() {$/;"	f	class:Window
Window	Window.h	/^class Window {$/;"	c
WindowMgr	Window.h	/^  WindowMgr() {$/;"	f	class:WindowMgr
WindowMgr	Window.h	/^class WindowMgr {$/;"	c
WriteBool	Serialize.cpp	/^int WriteBool(int fd, int count, bool * b)$/;"	f
WriteConfig	Config.cpp	/^void Config::WriteConfig(const char *configFile)$/;"	f	class:Config
WriteFloat	Serialize.cpp	/^int WriteFloat(int fd, int count, float *f)$/;"	f
WriteHighScore	Config.cpp	/^void Config::WriteHighScore(int score)$/;"	f	class:Config
WriteInt	Serialize.cpp	/^int WriteInt(int fd, int count, int *s, bool rf)$/;"	f
WriteShort	Serialize.cpp	/^int WriteShort(int fd, int count, short *s)$/;"	f
WriteTGA	TGALoader.cpp	/^void WriteTGA(const char *filename, TGAImageRec *image, unsigned int size)$/;"	f
WriteTexturedTriangle	Serialize.cpp	/^int WriteTexturedTriangle(int fd, int count, TexturedTriangle * tt)$/;"	f
WriteXYZ	Serialize.cpp	/^int WriteXYZ(int fd, int count, XYZ * xyz)$/;"	f
XYZ	Quaternions.h	/^class XYZ {$/;"	c
_AGL_DSP_H_	AGL_DSp.h	24;"	d
_CAMERA_H_	Camera.h	21;"	d
_COLOR_H_	Colors.h	21;"	d
_CONFIG_H_	Config.h	21;"	d
_CONSTANTS_H_	Constants.h	21;"	d
_DECALS_H_	Decals.h	21;"	d
_FILES_H_	Files.h	21;"	d
_FOG_H_	Fog.h	21;"	d
_FONT_H_	Font.h	21;"	d
_GAME_H_	Game.h	22;"	d
_GLOBALS_H_	Globals.h	21;"	d
_GUI_BUTTON_H_	Button.h	21;"	d
_GUI_IMAGE_H_	Image.h	21;"	d
_GUI_LABEL_H_	Label.h	21;"	d
_GUI_WINDOW_H_	Window.h	21;"	d
_MACINPUT_H_	MacInput.h	21;"	d
_MATHS_H_	Maths.h	21;"	d
_MODELS_H_	Models.h	21;"	d
_MYALERTS_H_	Alerts.h	22;"	d
_PERSON_H_	Person.h	21;"	d
_PHYSICSMATH_H_	PhysicsMath.h	21;"	d
_QUATERNIONS_H_	Quaternions.h	22;"	d
_SDL_FUNCS_H_	SDL_funcs.h	22;"	d
_SKELETON_H_	Skeleton.h	21;"	d
_SPRITE_H_	Sprites.h	21;"	d
_TEXT_H_	Text.h	21;"	d
_TGA_LOADER_H_	TGALoader.h	21;"	d
_THREADS_H_	Threads.h	21;"	d
_VIEWER_H_	Viewer.h	22;"	d
_WEAPON_H_	Weapon.h	21;"	d
a	Colors.h	/^  GLfloat a;                    \/\/alpha$/;"	m	class:Color
a	Globals.cpp	/^float a, b;$/;"	v
a1	Globals.cpp	/^float a1, a2, a3;$/;"	v
a2	Globals.cpp	/^float a1, a2, a3;$/;"	v
a3	Globals.cpp	/^float a1, a2, a3;$/;"	v
abdomen	Skeleton.h	53;"	d
abdomencolor	Person.h	/^  float abdomencolor[3];$/;"	m	class:Costume
abdomenmodel	Constants.h	138;"	d
aimamount	Person.h	/^  float aimamount;$/;"	m	class:Person
aimer	Game.h	/^  XYZ aimer[2];$/;"	m	class:Game
aiming	Person.h	/^  bool aiming;$/;"	m	class:Person
aimkey	MacInput.cpp	/^int aimkey;$/;"	v
aimtoggle	Game.h	/^  bool aimtoggle;$/;"	m	class:Game
aimtoggle	Viewer.h	/^  bool aimtoggle;$/;"	m	class:Viewer
alivetime	Decals.h	/^  float alivetime[maxdecals];$/;"	m	class:Decals
alivetime	Sprites.h	/^  float alivetime[maxsprites];$/;"	m	class:Sprites
alutLoadWAVFile	Support.h	66;"	d
alutLoadWAVFile_CFH	Support.cpp	/^void alutLoadWAVFile_CFH(char *filename, ALenum * format, void **wave,$/;"	f
alutUnloadWAV	Support.h	67;"	d
alutUnloadWAV_CFH	Support.cpp	/^void alutUnloadWAV_CFH(ALenum format, void *wave, unsigned int size,$/;"	f
ammo	Weapon.h	/^  int ammo;$/;"	m	class:Weapon
angle	Quaternions.h	/^  float x, y, z, angle;$/;"	m	struct:angle_axis
angle_axis	Quaternions.h	/^struct angle_axis {$/;"	s
animation	Globals.cpp	/^Animation animation[30];$/;"	v
animation	Viewer.cpp	/^Animation animation[30];$/;"	v
assaultrifle	Constants.h	64;"	d
assaultrifleaimanim	Constants.h	39;"	d
assaultriflemodel	Constants.h	72;"	d
attach	Window.h	/^  void attach(Window *window) {$/;"	f	class:Window
attackframe	Person.h	/^  int attackframe;$/;"	m	class:Person
attacktarget	Person.h	/^  float attacktarget;$/;"	m	class:Person
averageloc	Person.h	/^  XYZ averageloc;$/;"	m	class:Person
azertykeyboard	Config.h	/^  int azertykeyboard;$/;"	m	class:Config
azertykeyboard	Game.h	/^  bool azertykeyboard;$/;"	m	class:Game
azertykeyboard	Viewer.h	/^  bool azertykeyboard;$/;"	m	class:Viewer
b	Colors.h	/^  GLfloat b;                    \/\/blue$/;"	m	class:Color
b	Globals.cpp	/^float a, b;$/;"	v
b	Models.h	/^  float r, g, b;$/;"	m	class:TexturedTriangle
bInter	Globals.cpp	/^bool bInter;$/;"	v
backwardsanim	Person.h	/^  bool backwardsanim;$/;"	m	class:Person
backwardskey	MacInput.cpp	/^int backwardskey;$/;"	v
badkills	Game.h	/^  int badkills;$/;"	m	class:Game
base	Font.h	/^  GLuint base;$/;"	m	class:Font
base	Label.h	/^  GLuint base;$/;"	m	class:Label
base	Text.h	/^  GLuint base;$/;"	m	class:Text
beatgame	Config.h	/^  bool beatgame;$/;"	m	class:Config
beginx	Game.h	/^  int beginx, endx;$/;"	m	class:Game
beginz	Game.h	/^  int beginz, endz;$/;"	m	class:Game
bjoint1	Person.h	/^  Joint *bjoint1, *bjoint2;$/;"	m	class:Person
bjoint2	Person.h	/^  Joint *bjoint1, *bjoint2;$/;"	m	class:Person
bleeddelay	Person.h	/^  float bleeddelay;$/;"	m	class:Person
bleeding	Person.h	/^  float bleeding;$/;"	m	class:Person
block_key	Person.h	/^  int block_key;$/;"	m	class:Person
block_spacing	Game.h	55;"	d
blockcollide	Game.h	/^  Model blockcollide[4];$/;"	m	class:Game
blockocclude	Game.h	/^  Model blockocclude;$/;"	m	class:Game
blockroofs	Game.h	/^  Model blockroofs[4];$/;"	m	class:Game
blocks	Game.h	/^  Model blocks[4];$/;"	m	class:Game
blocksimple	Game.h	/^  Model blocksimple;$/;"	m	class:Game
blocksimple	Viewer.h	/^  Model blocksimple;$/;"	m	class:Viewer
blocksimplecollide	Game.h	/^  Model blocksimplecollide[4];$/;"	m	class:Game
blockwalls	Game.h	/^  Model blockwalls[4];$/;"	m	class:Game
blood	Config.h	/^  bool blood;$/;"	m	class:Config
blood	Globals.cpp	/^bool blood;$/;"	v
bloodpool	Constants.h	30;"	d
bloodspritedown	Sprites.h	45;"	d
bloodspritenoup	Sprites.h	46;"	d
bloodtextureptr	Decals.h	/^  GLuint bloodtextureptr[11];$/;"	m	class:Decals
bloodtextureptr	Sprites.h	/^  GLuint bloodtextureptr;$/;"	m	class:Sprites
blur	Game.h	/^  bool blur;$/;"	m	class:Game
blur	Viewer.h	/^  bool blur;$/;"	m	class:Viewer
blurness	Config.h	/^  int blurness;$/;"	m	class:Config
blurred	Skeleton.h	/^  float blurred;$/;"	m	class:Joint
bodycoords	Game.h	/^  XYZ bodycoords;$/;"	m	class:Game
bodycoords	Viewer.h	/^  XYZ bodycoords;$/;"	m	class:Viewer
bodyguardcostume	Constants.h	147;"	d
bodyhitsound	Constants.h	90;"	d
bodylandsound	Constants.h	87;"	d
bodywhacksound	Constants.h	106;"	d
boneconnect	Skeleton.h	34;"	d
bounce2sound	Constants.h	104;"	d
bouncesound	Constants.h	103;"	d
boundingboxmax	Models.h	/^  XYZ boundingboxmin, boundingboxmax;$/;"	m	class:Model
boundingboxmin	Models.h	/^  XYZ boundingboxmin, boundingboxmax;$/;"	m	class:Model
boundingpoints	Game.h	/^  XYZ boundingpoints[8];$/;"	m	class:Game
boundingpoints	Viewer.h	/^  XYZ boundingpoints[8];$/;"	m	class:Viewer
boundingspherecenter	Models.h	/^  XYZ boundingspherecenter;$/;"	m	class:Model
boundingsphereradius	Models.h	/^  float boundingsphereradius;$/;"	m	class:Model
bpp	Config.h	/^  int bpp;$/;"	m	class:Config
bpp	TGALoader.h	/^  GLuint bpp;                   \/\/ Image Color Depth In Bits Per Pixel.$/;"	m	struct:TGAImageRec
brightness	Sprites.h	/^  float brightness[maxsprites];$/;"	m	class:Sprites
broken	Skeleton.h	/^  int broken;$/;"	m	class:Skeleton
bufferattack	Person.h	/^  int bufferattack;$/;"	m	class:Person
bullet	Sprites.h	51;"	d
bullethole	Constants.h	28;"	d
bulletholetextureptr	Decals.h	/^  GLuint bulletholetextureptr;$/;"	m	class:Decals
bulletinstant	Sprites.h	52;"	d
bullettextureptr	Sprites.h	/^  GLuint bullettextureptr;$/;"	m	class:Sprites
camera	Globals.cpp	/^Camera camera;$/;"	v
camera	Viewer.cpp	/^Camera camera;$/;"	v
camerashake	Camera.h	/^  float camerashake;$/;"	m	class:Camera
canbeoverridden	Skeleton.h	/^  bool canbeoverridden;$/;"	m	class:Animation
casualcostumes	Constants.h	148;"	d
cfh_fopen	Support.cpp	/^FILE *cfh_fopen(const char *filename, const char *mode)$/;"	f
checkCollisions	GameTick.cpp	/^void Game::checkCollisions()$/;"	f	class:Game
chestcolor	Person.h	/^  float chestcolor[3];$/;"	m	class:Costume
chestmodel	Constants.h	137;"	d
chestpainanim	Constants.h	42;"	d
children	Window.h	/^  std::vector <Window*>children;$/;"	m	class:Window
citypeoplenum	Game.h	/^  int citypeoplenum[num_blocks][num_blocks];$/;"	m	class:Game
cityrotation	Game.h	/^  int cityrotation[num_blocks][num_blocks];$/;"	m	class:Game
citytype	Game.h	/^  int citytype[num_blocks][num_blocks];$/;"	m	class:Game
civiliantype	Person.h	37;"	d
civkills	Game.h	/^  int civkills;$/;"	m	class:Game
clicksound	Constants.h	97;"	d
collision	Person.h	/^  bool collision;$/;"	m	class:HitStruct
color	Image.h	/^  Color color;$/;"	m	class:Image
color	Label.h	/^  Color color;$/;"	m	class:Label
color1	Sprites.h	/^  float color1[maxsprites];$/;"	m	class:Sprites
color2	Sprites.h	/^  float color2[maxsprites];$/;"	m	class:Sprites
color3	Sprites.h	/^  float color3[maxsprites];$/;"	m	class:Sprites
config	Globals.cpp	/^Config config;$/;"	v
config	Viewer.cpp	/^Config config;$/;"	v
constraint	Skeleton.h	35;"	d
costume	Globals.cpp	/^Costume costume[10];$/;"	v
costume	Viewer.cpp	/^Costume costume[10];$/;"	v
crater	Constants.h	29;"	d
cratertextureptr	Decals.h	/^  GLuint cratertextureptr;$/;"	m	class:Decals
crouchanim	Constants.h	40;"	d
currentanimation	Person.h	/^  int currentanimation;$/;"	m	class:Person
currentframe	Person.h	/^  int currentframe;$/;"	m	class:Person
customlevels	Config.h	/^  int customlevels;$/;"	m	class:Config
cycle	Game.h	/^  int cycle;$/;"	m	class:Game
d	Globals.cpp	/^float d;$/;"	v
data	TGALoader.h	/^  GLubyte *data;                \/\/ Image Data (Up To 32 Bits)$/;"	m	struct:TGAImageRec
dead	Person.h	/^  bool dead;$/;"	m	class:Person
deadpersonspritetextureptr	Game.h	/^  GLuint deadpersonspritetextureptr;$/;"	m	class:Game
debug	Config.h	/^  bool debug;$/;"	m	class:Config
decals	Globals.cpp	/^Decals decals;$/;"	v
decals	Viewer.cpp	/^Decals decals;$/;"	v
deg2rad	Quaternions.h	32;"	d
denom	Globals.cpp	/^float total, denom, mu;$/;"	v
det	PhysicsMath.h	/^inline float Matrix3x3::det(void)$/;"	f	class:Matrix3x3
difficulty	Game.h	/^  float difficulty;$/;"	m	class:Game
difficulty	Globals.h	/^  float difficulty;$/;"	m	class:Mission
difficulty	Viewer.h	/^  float difficulty;$/;"	m	class:Viewer
disguisekillsound	Constants.h	109;"	d
diveanim	Constants.h	58;"	d
dotproduct	Quaternions.cpp	/^float dotproduct(XYZ point1, XYZ point2)$/;"	f
draw	Decals.cpp	/^void Decals::draw()$/;"	f	class:Decals
draw	Image.cpp	/^void Image::draw()              \/\/ Where The Printing Happens$/;"	f	class:Image
draw	Label.cpp	/^void Label::draw()              \/\/ Where The Printing Happens$/;"	f	class:Label
draw	Models.cpp	/^void Model::draw()$/;"	f	class:Model
draw	Models.cpp	/^void Model::draw(float r, float g, float b)$/;"	f	class:Model
draw	Models.cpp	/^void Model::draw(float r, float g, float b, float o)$/;"	f	class:Model
draw	Models.cpp	/^void Model::draw(float r, float g, float b, float x, float y, float z)$/;"	f	class:Model
draw	Sprites.cpp	/^void Sprites::draw()$/;"	f	class:Sprites
draw	Window.cpp	/^void Window::draw()$/;"	f	class:Window
draw	Window.h	/^  void draw() {$/;"	f	class:WindowMgr
drawn	Game.h	/^  bool drawn[num_blocks][num_blocks];$/;"	m	class:Game
duck_key	Person.h	/^  int duck_key;$/;"	m	class:Person
e11	PhysicsMath.h	/^  float e11, e12, e13, e21, e22, e23, e31, e32, e33;$/;"	m	class:Matrix3x3
e12	PhysicsMath.h	/^  float e11, e12, e13, e21, e22, e23, e31, e32, e33;$/;"	m	class:Matrix3x3
e13	PhysicsMath.h	/^  float e11, e12, e13, e21, e22, e23, e31, e32, e33;$/;"	m	class:Matrix3x3
e21	PhysicsMath.h	/^  float e11, e12, e13, e21, e22, e23, e31, e32, e33;$/;"	m	class:Matrix3x3
e22	PhysicsMath.h	/^  float e11, e12, e13, e21, e22, e23, e31, e32, e33;$/;"	m	class:Matrix3x3
e23	PhysicsMath.h	/^  float e11, e12, e13, e21, e22, e23, e31, e32, e33;$/;"	m	class:Matrix3x3
e31	PhysicsMath.h	/^  float e11, e12, e13, e21, e22, e23, e31, e32, e33;$/;"	m	class:Matrix3x3
e32	PhysicsMath.h	/^  float e11, e12, e13, e21, e22, e23, e31, e32, e33;$/;"	m	class:Matrix3x3
e33	PhysicsMath.h	/^  float e11, e12, e13, e21, e22, e23, e31, e32, e33;$/;"	m	class:Matrix3x3
eaten	Person.h	/^  int eaten;$/;"	m	class:Person
end	Game.h	/^  double end, start, framespersecond;$/;"	m	class:Game
end	Viewer.h	/^  double end, start, framespersecond;$/;"	m	class:Viewer
endx	Game.h	/^  int beginx, endx;$/;"	m	class:Game
endz	Game.h	/^  int beginz, endz;$/;"	m	class:Game
enemystate	Game.h	/^  int enemystate;$/;"	m	class:Game
enemytype	Globals.h	/^  int enemytype;$/;"	m	class:Mission
environment	Globals.cpp	/^Environment environment;$/;"	v
environment	Viewer.cpp	/^Environment environment;$/;"	v
eqn	Game.h	/^  double eqn[4];$/;"	m	class:Game
eqn	Viewer.h	/^  double eqn[4];$/;"	m	class:Viewer
euler	Quaternions.h	/^struct euler {$/;"	s
evilassaultrifletype	Person.h	41;"	d
evilprobability	Game.h	/^  int evilprobability;$/;"	m	class:Game
evilprobability	Globals.h	/^  int evilprobability;$/;"	m	class:Mission
evilsnipertype	Person.h	40;"	d
eviltype	Person.h	38;"	d
existing	Person.h	/^  bool existing;$/;"	m	class:Person
existing	Skeleton.h	/^  bool existing;$/;"	m	class:Joint
explosionsound	Constants.h	105;"	d
f	Serialize.cpp	/^  float f;$/;"	m	union:intfloat	file:
facing	Game.h	/^  XYZ facing;$/;"	m	class:Game
facing	Person.h	/^  XYZ facing;$/;"	m	class:Person
fast_sqrt	Maths.cpp	/^double fast_sqrt(register double arg)$/;"	f
fast_sqrt	Quaternions.cpp	/^float fast_sqrt(register float arg)$/;"	f
files	Game.h	/^  Files files;$/;"	m	class:Game
files	Skeleton.h	/^  Files files;$/;"	m	class:Animation
files	Skeleton.h	/^  Files files;$/;"	m	class:Skeleton
files	Viewer.h	/^  Files files;$/;"	m	class:Viewer
findDistance	Quaternions.cpp	/^float findDistance(XYZ point1, XYZ point2)$/;"	f
findDistancefast	Quaternions.cpp	/^float findDistancefast(XYZ point1, XYZ point2)$/;"	f
findLength	Quaternions.cpp	/^float findLength(XYZ point1)$/;"	f
findLengthfast	Quaternions.cpp	/^float findLengthfast(XYZ point1)$/;"	f
find_filename	Support.cpp	/^static int find_filename(char *filename)$/;"	f	file:
firey_environment	Constants.h	121;"	d
firstlongdead	Person.h	/^  bool firstlongdead;$/;"	m	class:Person
fix_filename	Support.cpp	/^static void fix_filename(const char *original, char *fixed)$/;"	f	file:
flaretextureptr	Game.h	/^  GLuint flaretextureptr;$/;"	m	class:Game
flaretextureptr	Sprites.h	/^  GLuint flaretextureptr;$/;"	m	class:Sprites
flashamount	Game.h	/^  float flashamount;$/;"	m	class:Game
flashb	Game.h	/^  float flashr, flashg, flashb;$/;"	m	class:Game
flashg	Game.h	/^  float flashr, flashg, flashb;$/;"	m	class:Game
flashr	Game.h	/^  float flashr, flashg, flashb;$/;"	m	class:Game
flashsprite	Sprites.h	41;"	d
fleshtone1	Constants.h	132;"	d
fleshtone2	Constants.h	133;"	d
fleshtone3	Constants.h	134;"	d
fog	Globals.cpp	/^Fog fog;$/;"	v
fog	Viewer.cpp	/^Fog fog;$/;"	v
fogColor	Fog.h	/^  GLfloat fogColor[4];$/;"	m	class:Fog
fogDensity	Fog.h	/^  GLfloat fogDensity;$/;"	m	class:Fog
fogEnd	Fog.h	/^  GLfloat fogEnd;$/;"	m	class:Fog
fogMode	Fog.h	/^  GLint fogMode;$/;"	m	class:Fog
fogStart	Fog.h	/^  GLfloat fogStart;$/;"	m	class:Fog
fogcolor	Fog.h	/^  Color fogcolor;               \/\/this should probably be in Environment$/;"	m	class:Fog
fogcolor	Globals.h	/^  Color fogcolor;$/;"	m	class:Environment
foggy_environment	Constants.h	118;"	d
font	Globals.cpp	/^Font font;$/;"	v
fontSet	Label.h	/^  int fontSet;$/;"	m	class:Label
footcolor	Person.h	/^  float footcolor[3];$/;"	m	class:Costume
footmodel	Constants.h	144;"	d
footstepsound	Constants.h	86;"	d
forward	Skeleton.h	/^  XYZ forward;$/;"	m	class:Skeleton
forward	Skeleton.h	/^  XYZ forward[max_frames];$/;"	m	class:Animation
forwardjoints	Skeleton.h	/^  int forwardjoints[3];$/;"	m	class:Skeleton
forwardskey	MacInput.cpp	/^int forwardskey;$/;"	v
framespersecond	Game.h	/^  double end, start, framespersecond;$/;"	m	class:Game
framespersecond	Viewer.h	/^  double end, start, framespersecond;$/;"	m	class:Viewer
free	Skeleton.h	/^  bool free;$/;"	m	class:Skeleton
freshkickkey	Person.h	/^  bool freshkickkey;$/;"	m	class:Person
freshshootkey	Person.h	/^  bool freshshootkey;$/;"	m	class:Person
friction	Globals.cpp	/^float friction;$/;"	v
frustum	Frustum.h	/^  float frustum[6][4];$/;"	m	class:FRUSTUM
frustum	Game.h	/^  FRUSTUM frustum;$/;"	m	class:Game
frustum	Viewer.h	/^  FRUSTUM frustum;$/;"	m	class:Viewer
fsFromStart	Support.h	31;"	d
fullscreen	Config.h	/^  bool fullscreen;$/;"	m	class:Config
g	Colors.h	/^  GLfloat g;                    \/\/green$/;"	m	class:Color
g	Models.h	/^  float r, g, b;$/;"	m	class:TexturedTriangle
g	PhysicsMath.h	/^float const g = -32.174f;       \/\/ acceleration due to gravity, ft\/s^2$/;"	v
gDSpContext	AGL_DSp.cpp	/^DSpContextReference gDSpContext;        \/\/ The global DrawSprocket context$/;"	v
gDSpContextAttributes	AGL_DSp.cpp	/^DSpContextAttributes gDSpContextAttributes;     \/\/ Global DrawSprocket context attributes$/;"	v
gOpenGLContext	AGL_DSp.cpp	/^AGLContext gOpenGLContext;      \/\/ The global OpenGL (AGL) context$/;"	v
gQuit	Game.h	/^  Boolean gQuit;$/;"	m	class:Game
gQuit	Viewer.h	/^  Boolean gQuit;$/;"	m	class:Viewer
gSampleSet	Globals.cpp	/^unsigned int gSampleSet[100];   \/\/ hundred sample set ID numbers$/;"	v
gSourceID	Globals.cpp	/^unsigned int gSourceID[100];    \/\/ hundred source IDs$/;"	v
game_state	Globals.h	/^enum game_state {$/;"	g
gameinprogress	Game.h	/^  bool gameinprogress;$/;"	m	class:Game
gamespeed	Game.h	/^  float gamespeed;$/;"	m	class:Game
gamespeed	Viewer.h	/^  float gamespeed;$/;"	m	class:Viewer
getInstance	Game.cpp	/^Game &Game::getInstance()$/;"	f	class:Game
getInstance	Viewer.cpp	/^Viewer &Viewer::getInstance()$/;"	f	class:Viewer
getInstance	Window.cpp	/^WindowMgr & WindowMgr::getInstance()$/;"	f	class:WindowMgr
getName	Window.h	/^  const char *getName() {$/;"	f	class:Window
getRoot	Window.h	/^  Window *getRoot() {$/;"	f	class:WindowMgr
getWindow	Window.cpp	/^Window *Window::getWindow(const char *winName)$/;"	f	class:Window
getupbackanim	Constants.h	56;"	d
getupfrontanim	Constants.h	55;"	d
glPrint	Text.cpp	/^void Text::glPrint(GLint x, GLint y, char *string, int set, float size, float width, float height)      \/\/ Where The Printing Happens$/;"	f	class:Text
goodkills	Game.h	/^  int goodkills;$/;"	m	class:Game
grabmouse	Config.h	/^  int grabmouse;$/;"	m	class:Config
gravity	Constants.h	26;"	d
grenade	Constants.h	67;"	d
grenadeaimanim	Constants.h	49;"	d
grenadebasemodel	Constants.h	77;"	d
grenadechargeanim	Constants.h	50;"	d
grenadepinmodel	Constants.h	78;"	d
grenadespoonmodel	Constants.h	79;"	d
grenadesprite	Sprites.h	42;"	d
grenadethrowanim	Constants.h	51;"	d
grenadethrowsound	Constants.h	102;"	d
grenamount	Person.h	/^  float grenamount;$/;"	m	class:Person
grenphase	Person.h	/^  int grenphase;$/;"	m	class:Person
groin	Skeleton.h	56;"	d
groundish	Globals.cpp	/^bool groundish;$/;"	v
groundlevel	Globals.cpp	/^float groundlevel;$/;"	v
gunmodels	Globals.cpp	/^Model gunmodels[11];$/;"	v
gunmodels	Viewer.cpp	/^Model gunmodels[11];$/;"	v
gunrotate1	Weapon.h	/^  float gunrotate1, gunrotate2, gunrotate3;$/;"	m	class:Weapon
gunrotate2	Weapon.h	/^  float gunrotate1, gunrotate2, gunrotate3;$/;"	m	class:Weapon
gunrotate3	Weapon.h	/^  float gunrotate1, gunrotate2, gunrotate3;$/;"	m	class:Weapon
gunrotation	Skeleton.h	/^  float gunrotation[max_frames];$/;"	m	class:Animation
h	Support.h	/^  int h;$/;"	m	struct:Point
handcolor	Person.h	/^  float handcolor[3];$/;"	m	class:Costume
handgun1	Constants.h	65;"	d
handgun2	Constants.h	66;"	d
handgun2basemodel	Constants.h	75;"	d
handgun2slidemodel	Constants.h	76;"	d
handgunbasemodel	Constants.h	73;"	d
handgunslidemodel	Constants.h	74;"	d
handmodel	Constants.h	141;"	d
hasgun	Skeleton.h	/^  int hasgun;$/;"	m	class:Joint
hasparent	Skeleton.h	/^  bool hasparent;$/;"	m	class:Joint
head	Skeleton.h	43;"	d
headcolor	Person.h	/^  float headcolor[3];$/;"	m	class:Costume
headlandsound	Constants.h	88;"	d
headmodel	Constants.h	136;"	d
headpainanim	Constants.h	41;"	d
headshotsound	Constants.h	95;"	d
headwhacksound	Constants.h	94;"	d
health	Person.h	/^  float health;$/;"	m	class:Person
helpkey	MacInput.cpp	/^int helpkey;$/;"	v
hi	Support.h	/^  unsigned int hi;$/;"	m	struct:UnsignedWide
highscore	Config.h	/^  int highscore;$/;"	m	class:Config
hitlocation	Person.h	/^  XYZ hitlocation;$/;"	m	class:HitStruct
howmanydecals	Decals.h	/^  int howmanydecals;$/;"	m	class:Decals
howmanysprites	Sprites.h	/^  int howmanysprites;$/;"	m	class:Sprites
hsFile	Config.h	/^  const char *hsFile;$/;"	m	class:Config
i	Globals.cpp	/^int i, j; \/\/wha?$/;"	v
i	Serialize.cpp	/^  int i;$/;"	m	union:intfloat	file:
i1024x768	Alerts.h	39;"	d
i640x480	Alerts.h	37;"	d
i800x600	Alerts.h	38;"	d
iOK	Alerts.h	33;"	d
iResolutionPopUp	Alerts.h	34;"	d
idleanim	Constants.h	33;"	d
impact	Globals.cpp	/^XYZ impact;$/;"	v
index	Image.h	/^  unsigned int index;$/;"	m	class:Image
init_sdlkeymap	SDL_funcs.cpp	/^void init_sdlkeymap()$/;"	f
initialbrightness	Sprites.h	/^  float initialbrightness[maxsprites];$/;"	m	class:Sprites
initialized	Game.h	/^  bool initialized;$/;"	m	class:Game
initialized	Viewer.h	/^  bool initialized;$/;"	m	class:Viewer
initialsize	Sprites.h	/^  float initialsize[maxsprites];$/;"	m	class:Sprites
initialvelocity	Sprites.h	/^  XYZ initialvelocity[maxsprites];$/;"	m	class:Sprites
instance	Game.cpp	/^std::auto_ptr <Game> Game::instance;$/;"	m	class:Game	file:
instance	Game.h	/^  static std::auto_ptr <Game> instance;$/;"	m	class:Game
instance	Viewer.cpp	/^std::auto_ptr <Viewer> Viewer::instance;$/;"	m	class:Viewer	file:
instance	Viewer.h	/^  static std::auto_ptr <Viewer> instance;$/;"	m	class:Viewer
instance	Window.cpp	/^std::auto_ptr < WindowMgr > WindowMgr::instance;$/;"	m	class:WindowMgr	file:
instance	Window.h	/^  static std::auto_ptr < WindowMgr > instance;$/;"	m	class:WindowMgr
intfloat	Serialize.cpp	/^union intfloat {$/;"	u	file:
intfloat	Serialize.cpp	/^} intfloat;$/;"	v	typeref:union:intfloat
isMouseOver	Button.cpp	/^bool Button::isMouseOver(bool recalc, float _xpos, float _ypos)$/;"	f	class:Button
isPressed	Button.h	/^  bool isPressed() { return pressed; }$/;"	f	class:Button
ismodified	Skeleton.h	/^  bool ismodified[max_joints][max_frames];$/;"	m	class:Animation
j	Globals.cpp	/^int i, j; \/\/wha?$/;"	v
joganim	Constants.h	34;"	d
joint1	Person.h	/^  Joint * joint1;$/;"	m	class:HitStruct
joint2	Person.h	/^  Joint *joint2;$/;"	m	class:HitStruct
jointlabels	Skeleton.h	/^  int jointlabels[max_joints];$/;"	m	class:Skeleton
joints	Skeleton.h	/^  Joint joints[max_joints];$/;"	m	class:Skeleton
jump_key	Person.h	/^  int jump_key;$/;"	m	class:Person
kErr_AGLContext_CreationFailed	Alerts.h	51;"	d
kErr_ActivateContextFailed	Alerts.h	48;"	d
kErr_DSpContext_ReserveFailed	Alerts.h	47;"	d
kErr_DSpFadeFailed	Alerts.h	50;"	d
kErr_DSpFindBestContextFailed	Alerts.h	46;"	d
kErr_DSpStartupFailed	Alerts.h	49;"	d
kInsignificantConstant7454955	Alerts.h	43;"	d
kMoveToFront	AGL_DSp.h	37;"	d
kMoveToFront	Alerts.h	27;"	d
kResID_ALRT_ErrorAlert	Alerts.h	30;"	d
kResID_ALRT_MessageAlert	Alerts.h	29;"	d
kResID_DLOG_SelectResolution	Alerts.h	32;"	d
kResID_STRn_ErrorStrings	Alerts.h	41;"	d
kick_key	Person.h	/^  int kick_key;$/;"	m	class:Person
killtarget	Person.h	/^  int killtarget;$/;"	m	class:Person
killtargetvisible	Person.h	/^  bool killtargetvisible;$/;"	m	class:Person
knife	Constants.h	68;"	d
knifemodel	Constants.h	80;"	d
knifeslashsound	Constants.h	110;"	d
knifesong	Constants.h	114;"	d
label	Skeleton.h	/^  int label;$/;"	m	class:Joint
lasersight	Game.h	/^  bool lasersight;$/;"	m	class:Game
lasersight	Viewer.h	/^  bool lasersight;$/;"	m	class:Viewer
lastdistancevictim	Person.h	/^  float lastdistancevictim;$/;"	m	class:Person
lastshot	Game.h	/^  XYZ lastshot[2];$/;"	m	class:Game
left_key	Person.h	/^  int left_key;$/;"	m	class:Person
leftankle	Skeleton.h	58;"	d
leftarmpainanim	Constants.h	45;"	d
leftelbow	Skeleton.h	46;"	d
leftfoot	Skeleton.h	59;"	d
lefthand	Skeleton.h	48;"	d
lefthip	Skeleton.h	54;"	d
leftkey	MacInput.cpp	/^int leftkey;$/;"	v
leftknee	Skeleton.h	57;"	d
leftlegpainanim	Constants.h	47;"	d
leftshoulder	Skeleton.h	45;"	d
leftwrist	Skeleton.h	47;"	d
length	Skeleton.h	/^  float length;$/;"	m	class:Joint
length	Skeleton.h	/^  float length;$/;"	m	class:Muscle
litup	Person.h	/^  bool litup;$/;"	m	class:Person
lo	Support.h	/^  unsigned int lo;$/;"	m	struct:UnsignedWide
load	Models.cpp	/^bool Model::load(Str255 Name)$/;"	f	class:Model
loadwav	GameInitDispose.cpp	87;"	d	file:
location	Sprites.h	/^  XYZ location[maxsprites];$/;"	m	class:Sprites
lock	Threads.h	/^  } void lock() {$/;"	f	class:Mutex
locked	Skeleton.h	/^  bool locked;$/;"	m	class:Joint
longdead	Person.h	/^  float longdead;$/;"	m	class:Person
losedelay	Game.h	/^  float losedelay;$/;"	m	class:Game
losedelay	Viewer.h	/^  float losedelay;$/;"	m	class:Viewer
losesound	Constants.h	108;"	d
lower	Skeleton.h	/^  bool lower;$/;"	m	class:Joint
lowerarmcolor	Person.h	/^  float lowerarmcolor[3];$/;"	m	class:Costume
lowerarmmodel	Constants.h	140;"	d
lowerlegcolor	Person.h	/^  float lowerlegcolor[3];$/;"	m	class:Costume
lowerlegmodel	Constants.h	143;"	d
lowforward	Skeleton.h	/^  XYZ lowforward;$/;"	m	class:Skeleton
lowforwardjoints	Skeleton.h	/^  int lowforwardjoints[3];$/;"	m	class:Skeleton
lyinganim	Constants.h	57;"	d
m	Game.cpp	/^Mutex Game::m;$/;"	m	class:Game	file:
m	Game.h	/^  static Mutex m;$/;"	m	class:Game
m	Threads.h	/^  Mutex & m;$/;"	m	class:MutexLocker
m	Threads.h	/^  pthread_mutex_t m;$/;"	m	class:Mutex
m	Viewer.cpp	/^Mutex Viewer::m;$/;"	m	class:Viewer	file:
m	Viewer.h	/^  static Mutex m;$/;"	m	class:Viewer
m	Window.cpp	/^Mutex WindowMgr::m;$/;"	m	class:WindowMgr	file:
m	Window.h	/^  static Mutex m;$/;"	m	class:WindowMgr
mResolution	Alerts.h	36;"	d
machinegunsound	Constants.h	92;"	d
machinegunsoundloop	Game.h	/^  int machinegunsoundloop;$/;"	m	class:Game
machinegunsoundloop	Viewer.h	/^  int machinegunsoundloop;$/;"	m	class:Viewer
main	Main.cpp	/^int main(int argc, char *argv[])$/;"	f
mainmenuness	Config.h	/^  bool mainmenuness;$/;"	m	class:Config
mainmenusong	Constants.h	112;"	d
mass	Skeleton.h	/^  float mass;$/;"	m	class:Joint
max	Globals.cpp	/^float max;$/;"	v
max_frames	Constants.h	24;"	d
max_joints	Constants.h	23;"	d
max_model_vertex	Models.h	34;"	d
max_muscles	Constants.h	25;"	d
max_people	Game.h	56;"	d
max_people_block	Game.h	57;"	d
max_textured_triangle	Models.h	33;"	d
maxdecals	Decals.h	37;"	d
maxfallvel	GameTick.cpp	49;"	d	file:
maxfps	Game.h	/^  int maxfps;$/;"	m	class:Game
maxfps	Viewer.h	/^  int maxfps;$/;"	m	class:Viewer
maxhealth	Person.h	/^  float maxhealth;$/;"	m	class:Person
maxlength	Skeleton.h	/^  float maxlength;$/;"	m	class:Muscle
maxsprites	Sprites.h	36;"	d
midp	Globals.cpp	/^XYZ midp;$/;"	v
minlength	Skeleton.h	/^  float minlength;$/;"	m	class:Muscle
mission	Game.h	/^  int mission;$/;"	m	class:Game
modelnum	Person.h	/^  int modelnum;$/;"	m	class:Person
modelnum	Skeleton.h	/^  int modelnum;$/;"	m	class:Joint
mouseloc	Game.h	/^  Point mouseloc;$/;"	m	class:Game
mouseloc	Viewer.h	/^  Point mouseloc;$/;"	m	class:Viewer
mouseover	Button.h	/^  bool mouseover;$/;"	m	class:Button
mouseoverbutton	Game.h	/^  int mouseoverbutton;$/;"	m	class:Game
mouseoverbutton	Viewer.h	/^  int mouseoverbutton;$/;"	m	class:Viewer
mouserotation	Game.h	/^  float mouserotation, mouserotation2;$/;"	m	class:Game
mouserotation	Viewer.h	/^  float mouserotation, mouserotation2;$/;"	m	class:Viewer
mouserotation2	Game.h	/^  float mouserotation, mouserotation2;$/;"	m	class:Game
mouserotation2	Viewer.h	/^  float mouserotation, mouserotation2;$/;"	m	class:Viewer
mousesensitivity	Game.h	/^  float mousesensitivity;$/;"	m	class:Game
mousesensitivity	Viewer.h	/^  float mousesensitivity;$/;"	m	class:Viewer
move	Game.h	/^  XYZ move;$/;"	m	class:Game
mrotate1	Skeleton.h	/^  float mrotate1[max_joints][max_frames], mrotate2[max_joints][max_frames],$/;"	m	class:Animation
mrotate2	Skeleton.h	/^  float mrotate1[max_joints][max_frames], mrotate2[max_joints][max_frames],$/;"	m	class:Animation
mrotate3	Skeleton.h	/^      mrotate3[max_joints][max_frames];$/;"	m	class:Animation
mu	Globals.cpp	/^float total, denom, mu;$/;"	v
multiplier	Globals.cpp	/^double multiplier = 0;$/;"	v
murderer	Game.h	/^  int murderer;$/;"	m	class:Game
muscle	Skeleton.h	36;"	d
muscles	Skeleton.h	/^  Muscle muscles[max_muscles];$/;"	m	class:Skeleton
musictoggle	Config.h	/^  int musictoggle;$/;"	m	class:Config
muzzleflaretextureptr	Sprites.h	/^  GLuint muzzleflaretextureptr;$/;"	m	class:Sprites
muzzleflashsprite	Sprites.h	38;"	d
n	Globals.cpp	/^XYZ n, pa1, pa2, pa3;$/;"	v
n	PhysicsMath.h	/^  float n;                      \/\/ number (scalar) part$/;"	m	class:Quaternion
name	Window.h	/^  string name;$/;"	m	class:Window
nearbulletsound	Constants.h	93;"	d
neck	Skeleton.h	44;"	d
newpoint1	Globals.cpp	/^XYZ newpoint1, newpoint2;$/;"	v
newpoint2	Globals.cpp	/^XYZ newpoint1, newpoint2;$/;"	v
night_environment	Constants.h	122;"	d
nocolors	Config.h	/^  int nocolors;$/;"	m	class:Config
nogun	Constants.h	62;"	d
normaldotproduct	Quaternions.cpp	/^float normaldotproduct(XYZ point1, XYZ point2)$/;"	f
normalrotated	Game.h	/^  XYZ normalrotated;$/;"	m	class:Game
normalrotated	Globals.cpp	/^XYZ normalrotated;$/;"	v
normals	Models.h	/^  XYZ normals[max_textured_triangle];$/;"	m	class:Model
normalv	Globals.cpp	/^float normalv[3];$/;"	v
num	Globals.h	/^  int num;$/;"	m	class:Mission
num_blocks	Game.h	54;"	d
num_joints	Skeleton.h	/^  int num_joints;$/;"	m	class:Skeleton
num_muscles	Skeleton.h	/^  int num_muscles;$/;"	m	class:Skeleton
numcasual	Constants.h	151;"	d
numframes	Skeleton.h	/^  int numframes;$/;"	m	class:Animation
nummissions	Game.h	/^  int nummissions;$/;"	m	class:Game
numpeople	Game.h	/^  int numpeople;$/;"	m	class:Game
numpoints	Decals.h	/^  int numpoints[maxdecals];$/;"	m	class:Decals
numpossibleguns	Game.h	/^  int numpossibleguns;$/;"	m	class:Game
numpossibleguns	Globals.h	/^  int numpossibleguns;$/;"	m	class:Mission
numrepeats	Globals.cpp	/^int numrepeats;$/;"	v
offset	Globals.cpp	/^float offset;$/;"	v
offset	Skeleton.h	/^  XYZ offset;$/;"	m	class:Joint
offset	Skeleton.h	/^  bool offset;$/;"	m	class:Skeleton
oldaverageloc	Person.h	/^  XYZ oldaverageloc;$/;"	m	class:Person
oldbutton	Game.h	/^  bool oldbutton;$/;"	m	class:Game
olddrawmouse	Game.h	/^  Point olddrawmouse;$/;"	m	class:Game
olddrawmouse	Viewer.h	/^  Point olddrawmouse;$/;"	m	class:Viewer
oldhealth	Person.h	/^  float oldhealth;$/;"	m	class:Person
oldlength	Globals.cpp	/^float oldlength;$/;"	v
oldlocation	Sprites.h	/^  XYZ oldlocation[maxsprites];$/;"	m	class:Sprites
oldmouseloc	Game.h	/^  Point oldmouseloc;$/;"	m	class:Game
oldmouseloc	Viewer.h	/^  Point oldmouseloc;$/;"	m	class:Viewer
oldmouseoverbutton	Game.h	/^  int oldmouseoverbutton;$/;"	m	class:Game
oldmouseoverbutton	Viewer.h	/^  int oldmouseoverbutton;$/;"	m	class:Viewer
oldmouserotation	Game.h	/^  float oldmouserotation, oldmouserotation2;$/;"	m	class:Game
oldmouserotation	Viewer.h	/^  float oldmouserotation, oldmouserotation2;$/;"	m	class:Viewer
oldmouserotation2	Game.h	/^  float oldmouserotation, oldmouserotation2;$/;"	m	class:Game
oldmouserotation2	Viewer.h	/^  float oldmouserotation, oldmouserotation2;$/;"	m	class:Viewer
oldoldoldpathnum	Person.h	/^  int oldoldoldpathnum;$/;"	m	class:Person
oldoldpathnum	Person.h	/^  int oldoldpathnum;$/;"	m	class:Person
oldoldrotation	Camera.h	/^  float oldoldrotation, oldoldrotation2;$/;"	m	class:Camera
oldoldrotation2	Camera.h	/^  float oldoldrotation, oldoldrotation2;$/;"	m	class:Camera
oldpathnum	Person.h	/^  int oldpathnum;$/;"	m	class:Person
oldplayercoords	Person.h	/^  XYZ oldplayercoords;$/;"	m	class:Person
oldposition	Camera.h	/^  XYZ oldposition;$/;"	m	class:Camera
oldposition	Skeleton.h	/^  XYZ oldposition;$/;"	m	class:Joint
oldrot	Game.h	/^  float oldrot, oldrot2;$/;"	m	class:Game
oldrot	Viewer.h	/^  float oldrot, oldrot2;$/;"	m	class:Viewer
oldrot2	Game.h	/^  float oldrot, oldrot2;$/;"	m	class:Game
oldrot2	Viewer.h	/^  float oldrot, oldrot2;$/;"	m	class:Viewer
oldrotation	Camera.h	/^  float oldrotation, oldrotation2;$/;"	m	class:Camera
oldrotation2	Camera.h	/^  float oldrotation, oldrotation2;$/;"	m	class:Camera
oldscore	Game.h	/^  int oldscore;$/;"	m	class:Game
oldvisionkey	Game.h	/^  bool oldvisionkey;$/;"	m	class:Game
oldzoom	Game.h	/^  bool zoom, oldzoom;$/;"	m	class:Game
onblockx	Game.h	/^  int onblockx, onblocky;$/;"	m	class:Game
onblocky	Game.h	/^  int onblockx, onblocky;$/;"	m	class:Game
onground	Person.h	/^  bool onground;$/;"	m	class:Person
onground	Skeleton.h	/^  bool onground[max_joints][max_frames];$/;"	m	class:Animation
onpath	Person.h	/^  bool onpath;$/;"	m	class:Person
operator *	PhysicsMath.h	/^inline Matrix3x3 operator*(Matrix3x3 m, float s)$/;"	f
operator *	PhysicsMath.h	/^inline Matrix3x3 operator*(Matrix3x3 m1, Matrix3x3 m2)$/;"	f
operator *	PhysicsMath.h	/^inline Matrix3x3 operator*(float s, Matrix3x3 m)$/;"	f
operator *	PhysicsMath.h	/^inline Quaternion operator*(Quaternion q, Vector v)$/;"	f
operator *	PhysicsMath.h	/^inline Quaternion operator*(Quaternion q, float s)$/;"	f
operator *	PhysicsMath.h	/^inline Quaternion operator*(Quaternion q1, Quaternion q2)$/;"	f
operator *	PhysicsMath.h	/^inline Quaternion operator*(Vector v, Quaternion q)$/;"	f
operator *	PhysicsMath.h	/^inline Quaternion operator*(float s, Quaternion q)$/;"	f
operator *	PhysicsMath.h	/^inline Vector operator*(Matrix3x3 m, Vector u)$/;"	f
operator *	PhysicsMath.h	/^inline Vector operator*(Vector u, Matrix3x3 m)$/;"	f
operator *	PhysicsMath.h	/^inline Vector operator*(Vector u, float s)$/;"	f
operator *	PhysicsMath.h	/^inline Vector operator*(float s, Vector u)$/;"	f
operator *	PhysicsMath.h	/^inline float operator*(Vector u, Vector v)$/;"	f
operator *	Quaternions.cpp	/^XYZ XYZ::operator*(XYZ add)$/;"	f	class:XYZ
operator *	Quaternions.cpp	/^XYZ XYZ::operator*(float add)$/;"	f	class:XYZ
operator *=	PhysicsMath.h	/^inline Matrix3x3 & Matrix3x3::operator*=(float s)$/;"	f	class:Matrix3x3
operator *=	PhysicsMath.h	/^inline Quaternion Quaternion::operator*=(float s)$/;"	f	class:Quaternion
operator *=	PhysicsMath.h	/^inline Vector & Vector::operator*=(float s)$/;"	f	class:Vector
operator *=	Quaternions.cpp	/^void XYZ::operator*=(XYZ add)$/;"	f	class:XYZ
operator *=	Quaternions.cpp	/^void XYZ::operator*=(float add)$/;"	f	class:XYZ
operator +	PhysicsMath.h	/^inline Matrix3x3 operator+(Matrix3x3 m1, Matrix3x3 m2)$/;"	f
operator +	PhysicsMath.h	/^inline Quaternion operator+(Quaternion q1, Quaternion q2)$/;"	f
operator +	PhysicsMath.h	/^inline Vector operator+(Vector u, Vector v)$/;"	f
operator +	Quaternions.cpp	/^XYZ XYZ::operator+(XYZ add)$/;"	f	class:XYZ
operator +=	PhysicsMath.h	/^inline Matrix3x3 & Matrix3x3::operator+=(Matrix3x3 m)$/;"	f	class:Matrix3x3
operator +=	PhysicsMath.h	/^inline Quaternion Quaternion::operator+=(Quaternion q)$/;"	f	class:Quaternion
operator +=	PhysicsMath.h	/^inline Vector & Vector::operator+=(Vector u)$/;"	f	class:Vector
operator +=	Quaternions.cpp	/^void XYZ::operator+=(XYZ add)$/;"	f	class:XYZ
operator -	PhysicsMath.h	/^inline Matrix3x3 operator-(Matrix3x3 m1, Matrix3x3 m2)$/;"	f
operator -	PhysicsMath.h	/^inline Quaternion operator-(Quaternion q1, Quaternion q2)$/;"	f
operator -	PhysicsMath.h	/^inline Vector Vector::operator-(void)$/;"	f	class:Vector
operator -	PhysicsMath.h	/^inline Vector operator-(Vector u, Vector v)$/;"	f
operator -	Quaternions.cpp	/^XYZ XYZ::operator-(XYZ add)$/;"	f	class:XYZ
operator -=	PhysicsMath.h	/^inline Matrix3x3 & Matrix3x3::operator-=(Matrix3x3 m)$/;"	f	class:Matrix3x3
operator -=	PhysicsMath.h	/^inline Quaternion Quaternion::operator-=(Quaternion q)$/;"	f	class:Quaternion
operator -=	PhysicsMath.h	/^inline Vector & Vector::operator-=(Vector u)$/;"	f	class:Vector
operator -=	Quaternions.cpp	/^void XYZ::operator-=(XYZ add)$/;"	f	class:XYZ
operator /	PhysicsMath.h	/^inline Matrix3x3 operator\/(Matrix3x3 m, float s)$/;"	f
operator /	PhysicsMath.h	/^inline Quaternion operator\/(Quaternion q, float s)$/;"	f
operator /	PhysicsMath.h	/^inline Vector operator\/(Vector u, float s)$/;"	f
operator /	Quaternions.cpp	/^XYZ XYZ::operator\/(float add)$/;"	f	class:XYZ
operator /=	PhysicsMath.h	/^inline Matrix3x3 & Matrix3x3::operator\/=(float s)$/;"	f	class:Matrix3x3
operator /=	PhysicsMath.h	/^inline Quaternion Quaternion::operator\/=(float s)$/;"	f	class:Quaternion
operator /=	PhysicsMath.h	/^inline Vector & Vector::operator\/=(float s)$/;"	f	class:Vector
operator /=	Quaternions.cpp	/^void XYZ::operator\/=(float add)$/;"	f	class:XYZ
operator =	Quaternions.cpp	/^void XYZ::operator=(float add)$/;"	f	class:XYZ
operator ==	Quaternions.cpp	/^bool XYZ::operator==(XYZ add)$/;"	f	class:XYZ
operator ^	PhysicsMath.h	/^inline Vector operator^(Vector u, Vector v)$/;"	f
operator ~	PhysicsMath.h	/^  Quaternion operator~(void) const {$/;"	f	class:Quaternion
ourkeys	SDL_funcs.cpp	/^static unsigned char ourkeys[16];$/;"	v	file:
overpoint	Game.h	/^  XYZ overpoint;$/;"	m	class:Game
overpoint	Globals.cpp	/^XYZ overpoint;$/;"	v
owner	Sprites.h	/^  int owner[maxsprites];$/;"	m	class:Sprites
p1v	Globals.cpp	/^float p1v[3];$/;"	v
p2v	Globals.cpp	/^float p2v[3];$/;"	v
p3v	Globals.cpp	/^float p3v[3];$/;"	v
pa1	Globals.cpp	/^XYZ n, pa1, pa2, pa3;$/;"	v
pa2	Globals.cpp	/^XYZ n, pa1, pa2, pa3;$/;"	v
pa3	Globals.cpp	/^XYZ n, pa1, pa2, pa3;$/;"	v
parent	Skeleton.h	/^  Joint *parent;$/;"	m	class:Joint
parent1	Skeleton.h	/^  Joint *parent1;$/;"	m	class:Muscle
parent2	Skeleton.h	/^  Joint *parent2;$/;"	m	class:Muscle
particlesspritedown	Sprites.h	47;"	d
path	Game.h	/^  Model path;$/;"	m	class:Game
pathcheckdelay	Person.h	/^  float pathcheckdelay;$/;"	m	class:Person
pathnum	Person.h	/^  int pathnum;$/;"	m	class:Person
pathsize	Person.h	/^  float pathsize;$/;"	m	class:Person
pathtarget	Person.h	/^  XYZ pathtarget;$/;"	m	class:Person
paused	Game.h	/^  bool paused;$/;"	m	class:Game
person	Game.h	/^  Person person[max_people];$/;"	m	class:Game
person	Viewer.cpp	/^Person person; \/\/just the one model to view$/;"	v
person	Viewer.h	/^  Person person[max_people];$/;"	m	class:Viewer
personspritetextureptr	Game.h	/^  GLuint personspritetextureptr;$/;"	m	class:Game
pi	PhysicsMath.h	/^float const pi = 3.14159265f;$/;"	v
pinpullsound	Constants.h	100;"	d
pinreplacesound	Constants.h	101;"	d
pinsprite	Sprites.h	43;"	d
pistol1sound	Constants.h	98;"	d
pistol2sound	Constants.h	99;"	d
pistolaimanim	Constants.h	35;"	d
playercoords	Person.h	/^  XYZ playercoords;$/;"	m	class:Person
playerhealth	Person.h	/^  float playerhealth;$/;"	m	class:Person
playerlowrotation	Person.h	/^  float playerlowrotation;$/;"	m	class:Person
playerrotation	Person.h	/^  float playerrotation;$/;"	m	class:Person
playerrotation2	Person.h	/^  float playerrotation2;$/;"	m	class:Person
playertype	Person.h	36;"	d
playervelocity	Person.h	/^  XYZ playervelocity;$/;"	m	class:Person
points	Decals.h	/^  XYZ points[8 * maxdecals];$/;"	m	class:Decals
pointv	Globals.cpp	/^float pointv[3];$/;"	v
policecostume	Constants.h	146;"	d
position	Camera.h	/^  XYZ position;$/;"	m	class:Camera
position	Skeleton.h	/^  XYZ position;$/;"	m	class:Joint
position	Skeleton.h	/^  XYZ position[max_joints][max_frames];$/;"	m	class:Animation
possiblegun	Game.h	/^  int possiblegun[6];$/;"	m	class:Game
precipitationdensity	Globals.h	/^  float precipitationdensity;$/;"	m	class:Environment
precipitationhorz	Globals.h	/^  float precipitationhorz;$/;"	m	class:Environment
precipitationvert	Globals.h	/^  float precipitationvert;$/;"	m	class:Environment
pressed	Button.h	/^  bool pressed;$/;"	m	class:Button
prev_state	GameLoop.cpp	/^enum game_state prev_state = INIT;$/;"	v	typeref:enum:game_state
psychicaimkey	MacInput.cpp	/^int psychicaimkey;$/;"	v
psychickey	MacInput.cpp	/^int psychickey;$/;"	v
psychicpower	Game.h	/^  float psychicpower;$/;"	m	class:Game
quaternion	Quaternions.h	/^struct quaternion {$/;"	s
r	Colors.h	/^  GLfloat r;                    \/\/red$/;"	m	class:Color
r	Models.h	/^  float r, g, b;$/;"	m	class:TexturedTriangle
rainsound	Constants.h	107;"	d
rainsprite	Sprites.h	49;"	d
raintextureptr	Sprites.h	/^  GLuint raintextureptr;$/;"	m	class:Sprites
rainy_environment	Constants.h	120;"	d
randomshoot_type	Constants.h	124;"	d
realoldposition	Skeleton.h	/^  XYZ realoldposition;$/;"	m	class:Joint
recoil	Weapon.h	/^  float recoil;$/;"	m	class:Weapon
relaxlength	Globals.cpp	/^float relaxlength;$/;"	v
reloading	Weapon.h	/^  float reloading;$/;"	m	class:Weapon
reloads	Person.h	/^  int reloads[10];$/;"	m	class:Person
reloads	Weapon.h	/^  int reloads; \/\/magazines$/;"	m	class:Weapon
reloadsound	Constants.h	96;"	d
reloadtoggle	Game.h	/^  bool reloadtoggle;$/;"	m	class:Game
reloadtoggle	Viewer.h	/^  bool reloadtoggle;$/;"	m	class:Viewer
rho	PhysicsMath.h	/^float const rho = 0.0023769f;   \/\/ desity of air at sea level, slugs\/ft^3$/;"	v
rifleaimanim	Constants.h	38;"	d
riflehitanim	Constants.h	48;"	d
rifleholdanim	Constants.h	37;"	d
riflesound	Constants.h	89;"	d
right_key	Person.h	/^  int right_key;$/;"	m	class:Person
rightankle	Skeleton.h	61;"	d
rightarmpainanim	Constants.h	44;"	d
rightelbow	Skeleton.h	50;"	d
rightfoot	Skeleton.h	62;"	d
righthand	Skeleton.h	52;"	d
righthip	Skeleton.h	55;"	d
rightkey	MacInput.cpp	/^int rightkey;$/;"	v
rightknee	Skeleton.h	60;"	d
rightlegpainanim	Constants.h	46;"	d
rightshoulder	Skeleton.h	49;"	d
rightwrist	Skeleton.h	51;"	d
root	Window.h	/^  Window *root;$/;"	m	class:WindowMgr
rotate1	Skeleton.h	/^  float rotate1, rotate2, rotate3;$/;"	m	class:Joint
rotate1	Skeleton.h	/^  float rotate1, rotate2, rotate3;$/;"	m	class:Muscle
rotate1	Skeleton.h	/^  float rotate1[max_joints][max_frames], rotate2[max_joints][max_frames],$/;"	m	class:Animation
rotate2	Skeleton.h	/^  float rotate1, rotate2, rotate3;$/;"	m	class:Joint
rotate2	Skeleton.h	/^  float rotate1, rotate2, rotate3;$/;"	m	class:Muscle
rotate2	Skeleton.h	/^  float rotate1[max_joints][max_frames], rotate2[max_joints][max_frames],$/;"	m	class:Animation
rotate3	Skeleton.h	/^      rotate3[max_joints][max_frames];$/;"	m	class:Animation
rotate3	Skeleton.h	/^  float rotate1, rotate2, rotate3;$/;"	m	class:Joint
rotate3	Skeleton.h	/^  float rotate1, rotate2, rotate3;$/;"	m	class:Muscle
rotation	Camera.h	/^  float rotation, rotation2;$/;"	m	class:Camera
rotation	Sprites.h	/^  float rotation[maxsprites];$/;"	m	class:Sprites
rotation2	Camera.h	/^  float rotation, rotation2;$/;"	m	class:Camera
running	Person.h	/^  bool running;$/;"	m	class:Person
sFile	Files.h	/^  int sFile;$/;"	m	class:Files
sSavedGameVolume	Files.h	/^  short sSavedGameVolume;$/;"	m	class:Files
scopetextureptr	Game.h	/^  GLuint scopetextureptr;$/;"	m	class:Game
score	Game.h	/^  int score;$/;"	m	class:Game
screenheight	Config.h	/^  int screenheight;$/;"	m	class:Config
screenheight	Game.h	/^  int screenwidth, screenheight;$/;"	m	class:Game
screenheight	Viewer.h	/^  int screenwidth, screenheight;$/;"	m	class:Viewer
screenwidth	Config.h	/^  int screenwidth;$/;"	m	class:Config
screenwidth	Game.h	/^  int screenwidth, screenheight;$/;"	m	class:Game
screenwidth	Viewer.h	/^  int screenwidth, screenheight;$/;"	m	class:Viewer
sdlkeymap	SDL_funcs.cpp	/^static int sdlkeymap[SDLK_LAST];$/;"	v	file:
selected	Skeleton.h	/^  int selected;$/;"	m	class:Skeleton
setActive	Image.cpp	/^void Image::setActive(unsigned int _index)$/;"	f	class:Image
setButton	Button.cpp	/^void Button::setButton(float _xpos, float _ypos, float _xwidth, float _yheight)$/;"	f	class:Button
setColor	Colors.h	/^  void setColor(GLfloat _r, GLfloat _g, GLfloat _b, GLfloat _a = 1) {$/;"	f	class:Color
setColor	Colors.h	/^  void setColor(const Color & _color) {$/;"	f	class:Color
setColor	Image.cpp	/^void Image::setColor(Color _color)$/;"	f	class:Image
setColor	Label.cpp	/^void Label::setColor(Color _color)$/;"	f	class:Label
setDim	Image.cpp	/^void Image::setDim(GLfloat _xpos, GLfloat _ypos, GLfloat _xwidth,$/;"	f	class:Image
setFont	Label.cpp	/^void Label::setFont(int set, GLuint _base, GLuint _texture)$/;"	f	class:Label
setImage	Image.cpp	/^void Image::setImage(GLuint _texture, unsigned int index)$/;"	f	class:Image
setLabel	Label.cpp	/^void Label::setLabel(GLfloat _xpos, GLfloat _ypos, float _size)$/;"	f	class:Label
setName	Window.h	/^  void setName(const char *winName) {$/;"	f	class:Window
setPressed	Button.h	/^  void setPressed(bool _pressed) { pressed = _pressed; }$/;"	f	class:Button
setText	Label.cpp	/^void Label::setText(const char *string)$/;"	f	class:Label
setup	Viewer.cpp	/^Viewer::setup()$/;"	f	class:Viewer
shoot_key	Person.h	/^  int shoot_key;$/;"	m	class:Person
shootsong	Constants.h	113;"	d
shotcount	Game.h	/^  int shotcount;$/;"	m	class:Game
shotdelay	Weapon.h	/^  float shotdelay;$/;"	m	class:Weapon
shotdelayamount	Constants.h	130;"	d
shotgun	Constants.h	69;"	d
shotgunmodel	Constants.h	81;"	d
shotgunsound	Constants.h	111;"	d
sidewalkcollide	Game.h	/^  Model sidewalkcollide;$/;"	m	class:Game
sidewalkcollide	Viewer.h	/^  Model sidewalkcollide;$/;"	m	class:Viewer
sinefluct	Globals.cpp	/^float sinefluct;$/;"	v
sinefluct	Image.h	/^  float sinefluct, sinefluctprog;$/;"	m	class:Image
sinefluctprog	Globals.cpp	/^float sinefluctprog;$/;"	v
sinefluctprog	Image.h	/^  float sinefluct, sinefluctprog;$/;"	m	class:Image
size	Label.h	/^  float size;$/;"	m	class:Label
size	Sprites.h	/^  float size[maxsprites];$/;"	m	class:Sprites
sizeX	TGALoader.h	/^  GLuint sizeX;$/;"	m	struct:TGAImageRec
sizeY	TGALoader.h	/^  GLuint sizeY;$/;"	m	struct:TGAImageRec
skeleton	Person.h	/^  Skeleton skeleton;$/;"	m	class:Person
skeletonmodels	Globals.cpp	/^Model skeletonmodels[10];$/;"	v
skeletonmodels	Viewer.cpp	/^Model skeletonmodels[10];$/;"	v
slomo	Globals.cpp	/^int slomo;$/;"	v
slomokeydown	Game.h	/^  bool slomokeydown;$/;"	m	class:Game
smokesprite	Sprites.h	39;"	d
smokespritenoup	Sprites.h	40;"	d
smoketextureptr	Sprites.h	/^  GLuint smoketextureptr;$/;"	m	class:Sprites
sniperrifle	Constants.h	63;"	d
sniperriflemodel	Constants.h	71;"	d
snipers_type	Constants.h	127;"	d
snowdelay	Globals.h	/^  float snowdelay;$/;"	m	class:Environment
snowsprite	Sprites.h	48;"	d
snowtextureptr	Sprites.h	/^  GLuint snowtextureptr;$/;"	m	class:Sprites
snowy_environment	Constants.h	119;"	d
soldiers_type	Constants.h	126;"	d
soulinsound	Constants.h	84;"	d
souloutsound	Constants.h	85;"	d
soundscalefactor	Globals.cpp	/^float soundscalefactor;$/;"	v
soundscalefactordefault	Constants.h	153;"	d
spawndelay	Game.h	/^  float spawndelay;$/;"	m	class:Game
specialforward	Skeleton.h	/^  XYZ specialforward[5];$/;"	m	class:Skeleton
speed	Person.h	/^  float speed;$/;"	m	class:Person
speed	Skeleton.h	/^  float speed[max_frames];$/;"	m	class:Animation
speedmult	Person.h	/^  float speedmult;$/;"	m	class:Person
sphere_line_intersection	Quaternions.cpp	/^bool sphere_line_intersection(float x1, float y1, float z1,$/;"	f
spoonsprite	Sprites.h	44;"	d
sprites	Globals.cpp	/^Sprites sprites;$/;"	v
sprites	Viewer.cpp	/^Sprites sprites;$/;"	v
square	Quaternions.cpp	/^inline float square(float f)$/;"	f
stabber_type	Constants.h	128;"	d
start	Game.h	/^  double end, start, framespersecond;$/;"	m	class:Game
start	Viewer.h	/^  double end, start, framespersecond;$/;"	m	class:Viewer
state	Game.h	/^  enum game_state state;$/;"	m	class:Game	typeref:enum:Game::game_state
stomachpainanim	Constants.h	43;"	d
street	Game.h	/^  Model street;$/;"	m	class:Game
street	Viewer.h	/^  Model street;$/;"	m	class:Viewer
strength	Skeleton.h	/^  float strength;$/;"	m	class:Muscle
sunny_environment	Constants.h	117;"	d
szSavedGameName	Files.h	/^  char szSavedGameName[FILE_NAME_SIZE + 1];$/;"	m	class:Files
tabkeydown	Game.h	/^  bool tabkeydown;$/;"	m	class:Game
target	Person.h	/^  float target;$/;"	m	class:Person
targetanimation	Person.h	/^  int targetanimation;$/;"	m	class:Person
targetframe	Person.h	/^  int targetframe;$/;"	m	class:Person
targetlength	Skeleton.h	/^  float targetlength;$/;"	m	class:Muscle
targetoffset	Camera.h	/^  XYZ targetoffset;$/;"	m	class:Camera
tempanimation	Person.h	/^  Animation tempanimation;$/;"	m	class:Person
testskeleton	Globals.cpp	/^Skeleton testskeleton;$/;"	v
texcoordsx	Decals.h	/^  float texcoordsx[8 * maxdecals];$/;"	m	class:Decals
texcoordsy	Decals.h	/^  float texcoordsy[8 * maxdecals];$/;"	m	class:Decals
text	Game.h	/^  Text text;$/;"	m	class:Game
text	Label.h	/^  string text;$/;"	m	class:Label
texture	Image.h	/^  GLuint texture[NUM_TEXTURES];$/;"	m	class:Image
texture	Label.h	/^  GLuint texture;$/;"	m	class:Label
theKeyMap	Game.h	/^  unsigned char theKeyMap[16];$/;"	m	class:Game
thirdperson	Config.h	/^  int thirdperson;$/;"	m	class:Config
throwanim	Constants.h	59;"	d
thrownanim	Constants.h	60;"	d
timeremaining	Game.h	/^  float timeremaining;$/;"	m	class:Game
timeremaining	Globals.h	/^  int timeremaining;$/;"	m	class:Mission
tol	PhysicsMath.h	/^float const tol = 0.0000000001f;        \/\/ float type tolerance $/;"	v
total	Globals.cpp	/^float total, denom, mu;$/;"	v
twist	Skeleton.h	/^  float twist[max_joints][max_frames];$/;"	m	class:Animation
twist2	Skeleton.h	/^  float twist2[max_joints][max_frames];$/;"	m	class:Animation
type	Decals.h	/^  int type[maxdecals];$/;"	m	class:Decals
type	Game.h	/^  int type;$/;"	m	class:Game
type	Globals.h	/^  int type;                     \/\/environment$/;"	m	class:Environment
type	Person.h	/^  int type;$/;"	m	class:Person
type	Skeleton.h	/^  int type;$/;"	m	class:Muscle
type	Sprites.h	/^  int type[maxsprites];$/;"	m	class:Sprites
type	Weapon.h	/^  int type; \/\/ditto: int whichgun;$/;"	m	class:Weapon
u0	Globals.cpp	/^float u0, u1, u2;$/;"	v
u1	Globals.cpp	/^float u0, u1, u2;$/;"	v
u2	Globals.cpp	/^float u0, u1, u2;$/;"	v
underpoint	Game.h	/^  XYZ underpoint;$/;"	m	class:Game
underpoint	Globals.cpp	/^XYZ underpoint;$/;"	v
unlock	Threads.h	/^  void unlock() {$/;"	f	class:Mutex
update	Image.cpp	/^void Image::update(float _sinefluct, float _sinefluctprog)$/;"	f	class:Image
upperarmcolor	Person.h	/^  float upperarmcolor[3];$/;"	m	class:Costume
upperarmmodel	Constants.h	139;"	d
upperlegcolor	Person.h	/^  float upperlegcolor[3];$/;"	m	class:Costume
upperlegmodel	Constants.h	142;"	d
usermousesensitivity	Config.h	/^  float usermousesensitivity;$/;"	m	class:Config
usermousesensitivity	Game.h	/^  float usermousesensitivity;$/;"	m	class:Game
usermousesensitivity	Viewer.h	/^  float usermousesensitivity;$/;"	m	class:Viewer
v	PhysicsMath.h	/^  Vector v;                     \/\/ vector part: v.x, v.y, v.z$/;"	m	class:Quaternion
v	Support.h	/^  int v;$/;"	m	struct:Point
v0	Globals.cpp	/^float v0, v1, v2;$/;"	v
v1	Globals.cpp	/^float v0, v1, v2;$/;"	v
v2	Globals.cpp	/^float v0, v1, v2;$/;"	v
vArray	Models.h	/^  GLfloat vArray[max_textured_triangle * 27];$/;"	m	class:Model
vblsync	Config.h	/^  bool vblsync;$/;"	m	class:Config
vec	Quaternions.cpp	/^void XYZ::vec(Vector add)$/;"	f	class:XYZ
vel	Globals.cpp	/^XYZ vel;$/;"	v
velocity	Person.h	/^  XYZ velocity;$/;"	m	class:Person
velocity	Skeleton.h	/^  XYZ velocity;$/;"	m	class:Joint
velocity	Sprites.h	/^  XYZ velocity[maxsprites];$/;"	m	class:Sprites
vertex	Models.h	/^  XYZ vertex[max_model_vertex];$/;"	m	class:Model
vertex	Models.h	/^  short vertex[3];$/;"	m	class:TexturedTriangle
vertexNum	Models.h	/^  short vertexNum, TriangleNum;$/;"	m	class:Model
viewdistance	Game.h	/^  float viewdistance;$/;"	m	class:Game
viewdistance	Globals.h	/^  float viewdistance;$/;"	m	class:Environment
viewdistance	Viewer.h	/^  float viewdistance;$/;"	m	class:Viewer
vipcostume	Constants.h	149;"	d
vipgoal	Game.h	/^  XYZ vipgoal;$/;"	m	class:Game
viptype	Person.h	39;"	d
visible	Skeleton.h	/^  bool visible;$/;"	m	class:Joint
visible	Skeleton.h	/^  bool visible;$/;"	m	class:Muscle
visions	Config.h	/^  int visions;$/;"	m	class:Config
visionsound	Constants.h	83;"	d
visrotation	Camera.h	/^  float visrotation, visrotation2;$/;"	m	class:Camera
visrotation2	Camera.h	/^  float visrotation, visrotation2;$/;"	m	class:Camera
w	Quaternions.h	/^  float x, y, z, w;$/;"	m	struct:quaternion
walkanim	Constants.h	36;"	d
wallhitsound	Constants.h	91;"	d
weapon	Person.h	/^  Weapon weapon;$/;"	m	class:Person
whichblockx	Person.h	/^  int whichblockx;$/;"	m	class:Person
whichblocky	Person.h	/^  int whichblocky;$/;"	m	class:Person
whichcostume	Person.h	/^  int whichcostume;$/;"	m	class:Person
whichsong	Game.h	/^  int whichsong;$/;"	m	class:Game
whichtri	Game.h	/^  int whichtri;$/;"	m	class:Game
whichtri	Globals.cpp	/^int whichtri;$/;"	v
x	PhysicsMath.h	/^  float x;$/;"	m	class:Vector
x	Quaternions.h	/^  float x, y, z, angle;$/;"	m	struct:angle_axis
x	Quaternions.h	/^  float x, y, z, w;$/;"	m	struct:quaternion
x	Quaternions.h	/^  float x, y, z;$/;"	m	struct:euler
x	Quaternions.h	/^  float x;$/;"	m	class:XYZ
xpos	Button.h	/^  GLfloat xpos, ypos;$/;"	m	class:Button
xpos	Image.h	/^  GLfloat xpos, ypos, xwidth, yheight;$/;"	m	class:Image
xpos	Label.h	/^  GLfloat xpos, ypos;$/;"	m	class:Label
xwidth	Button.h	/^  GLfloat xwidth, yheight;$/;"	m	class:Button
xwidth	Image.h	/^  GLfloat xpos, ypos, xwidth, yheight;$/;"	m	class:Image
y	PhysicsMath.h	/^  float y;$/;"	m	class:Vector
y	Quaternions.h	/^  float x, y, z, angle;$/;"	m	struct:angle_axis
y	Quaternions.h	/^  float x, y, z, w;$/;"	m	struct:quaternion
y	Quaternions.h	/^  float x, y, z;$/;"	m	struct:euler
y	Quaternions.h	/^  float y;$/;"	m	class:XYZ
yheight	Button.h	/^  GLfloat xwidth, yheight;$/;"	m	class:Button
yheight	Image.h	/^  GLfloat xpos, ypos, xwidth, yheight;$/;"	m	class:Image
ypos	Button.h	/^  GLfloat xpos, ypos;$/;"	m	class:Button
ypos	Image.h	/^  GLfloat xpos, ypos, xwidth, yheight;$/;"	m	class:Image
ypos	Label.h	/^  GLfloat xpos, ypos;$/;"	m	class:Label
z	PhysicsMath.h	/^  float z;$/;"	m	class:Vector
z	Quaternions.h	/^  float x, y, z, angle;$/;"	m	struct:angle_axis
z	Quaternions.h	/^  float x, y, z, w;$/;"	m	struct:quaternion
z	Quaternions.h	/^  float x, y, z;$/;"	m	struct:euler
z	Quaternions.h	/^  float z;$/;"	m	class:XYZ
zombie_type	Constants.h	125;"	d
zombieeatanim	Constants.h	52;"	d
zombiejoganim	Constants.h	53;"	d
zombiesong	Constants.h	115;"	d
zombietype	Person.h	42;"	d
zombiewalkanim	Constants.h	54;"	d
zoom	Game.h	/^  bool zoom, oldzoom;$/;"	m	class:Game
~Button	Button.h	/^  ~Button() {};$/;"	f	class:Button
~Decals	Decals.h	/^   ~Decals() {$/;"	f	class:Decals
~Font	Font.h	/^   ~Font() {$/;"	f	class:Font
~Game	Game.h	/^   ~Game() {$/;"	f	class:Game
~Game	Viewer.h	/^   ~Game() {$/;"	f	class:Viewer
~Image	Image.h	/^  ~Image() {$/;"	f	class:Image
~Label	Label.h	/^  ~Label() {$/;"	f	class:Label
~MutexLocker	Threads.h	/^  } ~MutexLocker() {$/;"	f	class:MutexLocker
~Sprites	Sprites.h	/^   ~Sprites() {$/;"	f	class:Sprites
~Text	Text.h	/^   ~Text() {$/;"	f	class:Text
~Window	Window.cpp	/^Window::~Window()$/;"	f	class:Window
~WindowMgr	Window.h	/^  ~WindowMgr() {$/;"	f	class:WindowMgr
